{"version":3,"sources":["webpack://WebglAddon/webpack/universalModuleDefinition","webpack://WebglAddon/webpack/bootstrap","webpack://WebglAddon/./src/WebglUtils.ts","webpack://WebglAddon//home/hernad/xterm.js/src/common/buffer/Constants.ts","webpack://WebglAddon/./src/RenderModel.ts","webpack://WebglAddon//home/hernad/xterm.js/src/common/TypedArrayUtils.ts","webpack://WebglAddon/./src/renderLayer/BaseRenderLayer.ts","webpack://WebglAddon/./src/atlas/CharAtlasCache.ts","webpack://WebglAddon/./src/atlas/CharAtlasUtils.ts","webpack://WebglAddon//home/hernad/xterm.js/src/browser/renderer/atlas/Constants.ts","webpack://WebglAddon//home/hernad/xterm.js/src/common/buffer/AttributeData.ts","webpack://WebglAddon//home/hernad/xterm.js/src/common/buffer/CellData.ts","webpack://WebglAddon/./src/WebglAddon.ts","webpack://WebglAddon/./src/WebglRenderer.ts","webpack://WebglAddon/./src/GlyphRenderer.ts","webpack://WebglAddon/./src/TypedArray.ts","webpack://WebglAddon/./src/renderLayer/LinkRenderLayer.ts","webpack://WebglAddon/./src/atlas/WebglCharAtlas.ts","webpack://WebglAddon//home/hernad/xterm.js/src/browser/Color.ts","webpack://WebglAddon/./src/renderLayer/CursorRenderLayer.ts","webpack://WebglAddon//home/hernad/xterm.js/src/common/input/TextDecoder.ts","webpack://WebglAddon/./src/RectangleRenderer.ts","webpack://WebglAddon//home/hernad/xterm.js/src/common/Lifecycle.ts","webpack://WebglAddon//home/hernad/xterm.js/src/common/EventEmitter.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","createShader","gl","type","source","shader","throwIfFalsy","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","Error","PROJECTION_MATRIX","Float32Array","vertexSource","fragmentSource","program","createProgram","attachShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","max","newLength","Math","min","length","newArray","DEFAULT_COLOR","DEFAULT_ATTR","CHAR_DATA_ATTR_INDEX","CHAR_DATA_CHAR_INDEX","CHAR_DATA_WIDTH_INDEX","CHAR_DATA_CODE_INDEX","NULL_CELL_CHAR","NULL_CELL_WIDTH","NULL_CELL_CODE","WHITESPACE_CELL_CHAR","WHITESPACE_CELL_WIDTH","WHITESPACE_CELL_CODE","RENDER_MODEL_INDICIES_PER_CELL","RENDER_MODEL_BG_OFFSET","RENDER_MODEL_FG_OFFSET","COMBINED_CHAR_BIT_MASK","this","cells","Uint32Array","lineLengths","selection","hasSelection","viewportStartRow","viewportEndRow","viewportCappedStartRow","viewportCappedEndRow","startCol","endCol","resize","cols","rows","indexCount","clear","fill","clearSelection","RenderModel","fillFallback","array","start","end","a","b","result","constructor","set","_container","id","zIndex","_alpha","_colors","_scaledCharWidth","_scaledCharHeight","_scaledCellWidth","_scaledCellHeight","_scaledCharLeft","_scaledCharTop","_canvas","document","createElement","classList","add","style","toString","_initCanvas","appendChild","dispose","removeChild","_charAtlas","_ctx","getContext","alpha","_clearAll","onOptionsChanged","terminal","onBlur","onFocus","onCursorMove","onGridChanged","startRow","endRow","onSelectionChanged","columnSelectMode","setColors","colorSet","_refreshCharAtlas","_setTransparency","oldCanvas","cloneNode","replaceChild","acquireCharAtlas","warmUp","dim","scaledCellWidth","scaledCellHeight","scaledCharWidth","scaledCharHeight","scaledCharLeft","scaledCharTop","width","scaledCanvasWidth","height","scaledCanvasHeight","canvasWidth","canvasHeight","_fillCells","x","y","fillRect","_fillBottomLineAtCells","devicePixelRatio","_fillLeftLineAtCell","_strokeRectAtCell","lineWidth","strokeRect","clearRect","fillStyle","background","css","_clearCells","_fillCharTrueColor","cell","font","_getFont","textBaseline","_clipRow","fillText","getChars","beginPath","rect","clip","isBold","isItalic","getOption","BaseRenderLayer","charAtlasCache","colors","newConfig","generateConfig","ownedByIndex","entry","ownedBy","indexOf","configEquals","config","atlas","splice","push","newEntry","WebglCharAtlas","index","NULL_COLOR","rgba","clonedColors","foreground","cursor","cursorAccent","selectionOpaque","ansi","slice","contrastCache","fontFamily","fontSize","fontWeight","fontWeightBold","allowTransparency","drawBoldTextInBrightColors","minimumContrastRatio","colorCode","INVERTED_DEFAULT_COLOR","DIM_OPACITY","CHAR_ATLAS_CELL_SPACING","fg","bg","toColorRGB","fromColorRGB","clone","newObj","AttributeData","isInverse","isUnderline","isBlink","isInvisible","isDim","getFgColorMode","getBgColorMode","isFgRGB","isBgRGB","isFgPalette","isBgPalette","isFgDefault","isBgDefault","getFgColor","getBgColor","content","combinedData","fromCharData","obj","CellData","setFromCharData","isCombined","getWidth","stringFromCodePoint","getCode","charCodeAt","combined","code","second","getAsCharData","_preserveDrawingBuffer","activate","element","_terminal","renderService","_core","_renderService","_colorManager","setRenderer","WebglRenderer","_createRenderer","onResize","WebglAddon","preserveDrawingBuffer","_model","_workCell","_onRequestRefreshRows","EventEmitter","_renderLayers","LinkRenderLayer","screenElement","CursorRenderLayer","dimensions","actualCellWidth","actualCellHeight","_devicePixelRatio","_updateDimensions","contextAttributes","antialias","depth","_gl","_rectangleRenderer","RectangleRenderer","_glyphRenderer","GlyphRenderer","onCharSizeChanged","event","forEach","reset","onDevicePixelRatioChange","setDimensions","_updateSelectionModel","updateSelection","fire","setAtlas","registerCharacterJoiner","handler","deregisterCharacterJoiner","joinerId","renderRows","beginFrame","_updateModel","render","row","buffer","ydisp","line","lines","loadCell","chars","updateCell","updateBackgrounds","viewportY","_charSizeService","floor","ceil","round","Disposable","vertexShaderSource","fragmentShaderSource","BYTES_PER_CELL","BYTES_PER_ELEMENT","_dimensions","_activeBuffer","_vertices","count","attributes","attributesBuffers","selectionAttributes","_program","_projectionLocation","getUniformLocation","_resolutionLocation","_textureLocation","_vertexArrayObject","createVertexArray","bindVertexArray","unitQuadVertices","unitQuadVerticesBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","unitQuadElementIndices","Uint8Array","elementIndicesBuffer","ELEMENT_ARRAY_BUFFER","_attributesBuffer","vertexAttribDivisor","_atlasTexture","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","_atlas","_updateCell","undefined","rasterizedGlyph","getRasterizedGlyphCombinedChar","getRasterizedGlyph","offset","size","texturePositionClipSpace","sizeClipSpace","model","_updateSelectionRange","startRowEndCol","middleRowsCount","getLine","getCell","char","viewport","canvas","newCount","renderModel","isSelectionVisible","useProgram","activeBuffer","bufferLength","si","sub","subarray","STREAM_DRAW","hasCanvasChanged","uniform1i","activeTexture","TEXTURE0","cacheCanvas","generateMipmap","uniformMatrix4fv","uniform2f","drawElementsInstanced","TRIANGLES","sliceFallback","container","linkifier","onLinkHover","e","_onLinkHover","onLinkLeave","_onLinkLeave","_state","_clearCurrentLink","x1","y1","middleRowCount","y2","x2","is256Color","TEXTURE_WIDTH","TEXTURE_HEIGHT","TEXTURE_CAPACITY","TRANSPARENT_COLOR","NULL_RASTERIZED_GLYPH","texturePosition","TMP_CANVAS_GLYPH_PADDING","_config","_didWarmUp","_cacheMap","_cacheMapCombined","_currentRowY","_currentRowX","_currentRowHeight","_workBoundingBox","top","left","bottom","right","_workAttributeData","_cacheCtx","_tmpCanvas","_tmpCtx","body","parentElement","_doWarmUp","_drawToCache","rasterizedGlyphSet","rasterizedGlyphSetBg","_getColorFromAnsiIndex","idx","_getBackgroundColor","bgColorMode","bgColor","inverse","arr","toPaddedHex","_getForegroundCss","fgColorMode","fgColor","bold","minimumContrastCss","_getMinimumContrastCss","toCss","_resolveBackgroundRgba","_resolveForegroundRgba","adjustedColor","getCss","bgRgba","fgRgba","ensureContrastRatioRgba","setCss","codeOrChars","String","fromCharCode","save","italic","temp","temp2","backgroundColor","globalCompositeOperation","fontStyle","globalAlpha","restore","imageData","getImageData","color","isEmpty","g","data","clearColor","_findGlyphBoundingBox","clippedImageData","_clipImageData","putImageData","boundingBox","found","alphaOffset","clippedData","Uint8ClampedArray","oldOffset","newOffset","ImageData","toRgba","rgbRelativeLuminance","rgb","rgbRelativeLuminance2","rs","gs","bs","pow","contrastRatio","l1","l2","ratio","bgL","fgL","reduceLuminance","increaseLuminance","bgR","bgG","bgB","fgR","fgG","fgB","cr","parseInt","_onRequestRefreshRowsEvent","_cell","isFocused","_cursorRenderers","_renderBarCursor","_renderBlockCursor","_renderUnderlineCursor","_clearCursor","_cursorBlinkStateManager","pause","cursorY","resume","CursorBlinkStateManager","_render","restartBlinkAnimation","isPaused","triggeredByAnimationFrame","_coreService","isCursorInitialized","isCursorHidden","baseY","viewportRelativeCursorY","cursorX","isTerminalFocused","cursorStyle","_renderBlurCursor","isCursorVisible","strokeStyle","_renderCallback","_restartInterval","_blinkStartTimeout","_blinkInterval","clearInterval","clearTimeout","_animationFrame","cancelAnimationFrame","_animationTimeRestarted","Date","now","requestAnimationFrame","timeToStart","setTimeout","time","setInterval","activeElement","textarea","hasFocus","codePoint","codepoint","_interim","decode","input","target","startPos","StringToUtf32","interim","byte1","byte2","byte3","byte4","discardInterim","cp","pos","tmp","missing","fourStop","Utf8ToUtf32","INDICES_PER_RECTANGLE","BYTES_PER_RECTANGLE","INITIAL_BUFFER_RECTANGLE_CAPACITY","_updateCachedColors","DYNAMIC_DRAW","_updateViewportRectangle","_bgFloat","_colorToFloat32Array","_selectionFloat","_addRectangleFloat","vertices","rectangleCount","currentStartX","currentBg","currentFg","currentInverse","modelIndex","_updateRectangle","startX","endX","expandFloat32Array","_addRectangle","log","_disposables","_isDisposed","register","unregister","_listeners","_disposed","_event","listener","queue"],"mappings":"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","file":"xterm-addon-webgl.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebglAddon\"] = factory();\n\telse\n\t\troot[\"WebglAddon\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * A matrix that when multiplies will translate 0-1 coordinates (left to right,\n * top to bottom) to clip space.\n */\nexport const PROJECTION_MATRIX = new Float32Array([\n  2, 0, 0, 0,\n  0, -2, 0, 0,\n  0, 0, 1, 0,\n  -1, 1, 0, 1\n]);\n\nexport function createProgram(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string): WebGLProgram | undefined {\n  const program = throwIfFalsy(gl.createProgram());\n  gl.attachShader(program, throwIfFalsy(createShader(gl, gl.VERTEX_SHADER, vertexSource)));\n  gl.attachShader(program, throwIfFalsy(createShader(gl, gl.FRAGMENT_SHADER, fragmentSource)));\n  gl.linkProgram(program);\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (success) {\n    return program;\n  }\n\n  console.error(gl.getProgramInfoLog(program));\n  gl.deleteProgram(program);\n}\n\nexport function createShader(gl: WebGLRenderingContext, type: number, source: string): WebGLShader | undefined {\n  const shader = throwIfFalsy(gl.createShader(type));\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (success) {\n    return shader;\n  }\n\n  console.error(gl.getShaderInfoLog(shader));\n  gl.deleteShader(shader);\n}\n\nexport function expandFloat32Array(source: Float32Array, max: number): Float32Array {\n  const newLength = Math.min(source.length * 2, max);\n  const newArray = new Float32Array(newLength);\n  for (let i = 0; i < source.length; i++) {\n    newArray[i] = source[i];\n  }\n  return newArray;\n}\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 256;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..31 (32th bit unused)\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 4 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderModel, ISelectionRenderModel } from './Types';\nimport { fill } from 'common/TypedArrayUtils';\n\nexport const RENDER_MODEL_INDICIES_PER_CELL = 3;\nexport const RENDER_MODEL_BG_OFFSET = 1;\nexport const RENDER_MODEL_FG_OFFSET = 2;\n\nexport const COMBINED_CHAR_BIT_MASK = 0x80000000;\n\nexport class RenderModel implements IRenderModel {\n  public cells: Uint32Array;\n  public lineLengths: Uint32Array;\n  public selection: ISelectionRenderModel;\n\n  constructor() {\n    this.cells = new Uint32Array(0);\n    this.lineLengths = new Uint32Array(0);\n    this.selection = {\n      hasSelection: false,\n      viewportStartRow: 0,\n      viewportEndRow: 0,\n      viewportCappedStartRow: 0,\n      viewportCappedEndRow: 0,\n      startCol: 0,\n      endCol: 0\n    };\n  }\n\n  public resize(cols: number, rows: number): void {\n    const indexCount = cols * rows * RENDER_MODEL_INDICIES_PER_CELL;\n    if (indexCount !== this.cells.length) {\n      this.cells = new Uint32Array(indexCount);\n      this.lineLengths = new Uint32Array(rows);\n    }\n  }\n\n  public clear(): void {\n    fill(this.cells, 0, 0);\n    fill(this.lineLengths, 0, 0);\n    this.clearSelection();\n  }\n\n  public clearSelection(): void {\n    this.selection.hasSelection = false;\n    this.selection.viewportStartRow = 0;\n    this.selection.viewportEndRow = 0;\n    this.selection.viewportCappedStartRow = 0;\n    this.selection.viewportCappedEndRow = 0;\n    this.selection.startCol = 0;\n    this.selection.endCol = 0;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport type TypedArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray\n  | Int8Array | Int16Array | Int32Array\n  | Float32Array | Float64Array;\n\n\n/**\n * polyfill for TypedArray.fill\n * This is needed to support .fill in all safari versions and IE 11.\n */\nexport function fill<T extends TypedArray>(array: T, value: number, start?: number, end?: number): T {\n  // all modern engines that support .fill\n  if (array.fill) {\n    return array.fill(value, start, end) as T;\n  }\n  return fillFallback(array, value, start, end);\n}\n\nexport function fillFallback<T extends TypedArray>(array: T, value: number, start: number = 0, end: number = array.length): T {\n  // safari and IE 11\n  // since IE 11 does not support Array.prototype.fill either\n  // we cannot use the suggested polyfill from MDN\n  // instead we simply fall back to looping\n  if (start >= array.length) {\n    return array;\n  }\n  start = (array.length + start) % array.length;\n  if (end >= array.length) {\n    end = array.length;\n  } else {\n    end = (array.length + end) % array.length;\n  }\n  for (let i = start; i < end; ++i) {\n    array[i] = value;\n  }\n  return array;\n}\n\n/**\n * Concat two typed arrays `a` and `b`.\n * Returns a new typed array.\n */\nexport function concat<T extends TypedArray>(a: T, b: T): T {\n  const result = new (a.constructor as any)(a.length + b.length);\n  result.set(a);\n  result.set(b, a.length);\n  return result;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderLayer } from './Types';\nimport { acquireCharAtlas } from '../atlas/CharAtlasCache';\nimport { Terminal } from 'xterm';\nimport { IColorSet } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { WebglCharAtlas } from 'atlas/WebglCharAtlas';\nimport { throwIfFalsy } from '../WebglUtils';\n\nexport abstract class BaseRenderLayer implements IRenderLayer {\n  private _canvas: HTMLCanvasElement;\n  protected _ctx!: CanvasRenderingContext2D;\n  private _scaledCharWidth: number = 0;\n  private _scaledCharHeight: number = 0;\n  private _scaledCellWidth: number = 0;\n  private _scaledCellHeight: number = 0;\n  private _scaledCharLeft: number = 0;\n  private _scaledCharTop: number = 0;\n\n  protected _charAtlas: WebglCharAtlas | undefined;\n\n  constructor(\n    private _container: HTMLElement,\n    id: string,\n    zIndex: number,\n    private _alpha: boolean,\n    protected _colors: IColorSet\n  ) {\n    this._canvas = document.createElement('canvas');\n    this._canvas.classList.add(`xterm-${id}-layer`);\n    this._canvas.style.zIndex = zIndex.toString();\n    this._initCanvas();\n    this._container.appendChild(this._canvas);\n  }\n\n  public dispose(): void {\n    this._container.removeChild(this._canvas);\n    if (this._charAtlas) {\n      this._charAtlas.dispose();\n    }\n  }\n\n  private _initCanvas(): void {\n    this._ctx = throwIfFalsy(this._canvas.getContext('2d', {alpha: this._alpha}));\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n  }\n\n  public onOptionsChanged(terminal: Terminal): void {}\n  public onBlur(terminal: Terminal): void {}\n  public onFocus(terminal: Terminal): void {}\n  public onCursorMove(terminal: Terminal): void {}\n  public onGridChanged(terminal: Terminal, startRow: number, endRow: number): void {}\n  public onSelectionChanged(terminal: Terminal, start: [number, number], end: [number, number], columnSelectMode: boolean = false): void {}\n\n  public setColors(terminal: Terminal, colorSet: IColorSet): void {\n    this._refreshCharAtlas(terminal, colorSet);\n  }\n\n  protected _setTransparency(terminal: Terminal, alpha: boolean): void {\n    // Do nothing when alpha doesn't change\n    if (alpha === this._alpha) {\n      return;\n    }\n\n    // Create new canvas and replace old one\n    const oldCanvas = this._canvas;\n    this._alpha = alpha;\n    // Cloning preserves properties\n    this._canvas = <HTMLCanvasElement>this._canvas.cloneNode();\n    this._initCanvas();\n    this._container.replaceChild(this._canvas, oldCanvas);\n\n    // Regenerate char atlas and force a full redraw\n    this._refreshCharAtlas(terminal, this._colors);\n    this.onGridChanged(terminal, 0, terminal.rows - 1);\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param terminal The terminal.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(terminal: Terminal, colorSet: IColorSet): void {\n    if (this._scaledCharWidth <= 0 && this._scaledCharHeight <= 0) {\n      return;\n    }\n    this._charAtlas = acquireCharAtlas(terminal, colorSet, this._scaledCharWidth, this._scaledCharHeight);\n    this._charAtlas.warmUp();\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    this._scaledCellWidth = dim.scaledCellWidth;\n    this._scaledCellHeight = dim.scaledCellHeight;\n    this._scaledCharWidth = dim.scaledCharWidth;\n    this._scaledCharHeight = dim.scaledCharHeight;\n    this._scaledCharLeft = dim.scaledCharLeft;\n    this._scaledCharTop = dim.scaledCharTop;\n    this._canvas.width = dim.scaledCanvasWidth;\n    this._canvas.height = dim.scaledCanvasHeight;\n    this._canvas.style.width = `${dim.canvasWidth}px`;\n    this._canvas.style.height = `${dim.canvasHeight}px`;\n\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n\n    this._refreshCharAtlas(terminal, this._colors);\n  }\n\n  public abstract reset(terminal: Terminal): void;\n\n  /**\n   * Fills 1+ cells completely. This uses the existing fillStyle on the context.\n   * @param x The column to start at.\n   * @param y The row to start at\n   * @param width The number of columns to fill.\n   * @param height The number of rows to fill.\n   */\n  protected _fillCells(x: number, y: number, width: number, height: number): void {\n    this._ctx.fillRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the bottom of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillBottomLineAtCells(x: number, y: number, width: number = 1): void {\n    this._ctx.fillRect(\n        x * this._scaledCellWidth,\n        (y + 1) * this._scaledCellHeight - window.devicePixelRatio - 1 /* Ensure it's drawn within the cell */,\n        width * this._scaledCellWidth,\n        window.devicePixelRatio);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the left of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillLeftLineAtCell(x: number, y: number): void {\n    this._ctx.fillRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        window.devicePixelRatio,\n        this._scaledCellHeight);\n  }\n\n  /**\n   * Strokes a 1px rectangle (2px on HDPI) around a cell. This uses the existing\n   * strokeStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _strokeRectAtCell(x: number, y: number, width: number, height: number): void {\n    this._ctx.lineWidth = window.devicePixelRatio;\n    this._ctx.strokeRect(\n        x * this._scaledCellWidth + window.devicePixelRatio / 2,\n        y * this._scaledCellHeight + (window.devicePixelRatio / 2),\n        width * this._scaledCellWidth - window.devicePixelRatio,\n        (height * this._scaledCellHeight) - window.devicePixelRatio);\n  }\n\n  /**\n   * Clears the entire canvas.\n   */\n  protected _clearAll(): void {\n    if (this._alpha) {\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n    }\n  }\n\n  /**\n   * Clears 1+ cells completely.\n   * @param x The column to start at.\n   * @param y The row to start at.\n   * @param width The number of columns to clear.\n   * @param height The number of rows to clear.\n   */\n  protected _clearCells(x: number, y: number, width: number, height: number): void {\n    if (this._alpha) {\n      this._ctx.clearRect(\n          x * this._scaledCellWidth,\n          y * this._scaledCellHeight,\n          width * this._scaledCellWidth,\n          height * this._scaledCellHeight);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(\n          x * this._scaledCellWidth,\n          y * this._scaledCellHeight,\n          width * this._scaledCellWidth,\n          height * this._scaledCellHeight);\n    }\n  }\n\n  /**\n   * Draws a truecolor character at the cell. The character will be clipped to\n   * ensure that it fits with the cell, including the cell to the right if it's\n   * a wide character. This uses the existing fillStyle on the context.\n   * @param terminal The terminal.\n   * @param cell The cell data for the character to draw.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   * @param color The color of the character.\n   */\n  protected _fillCharTrueColor(terminal: Terminal, cell: CellData, x: number, y: number): void {\n    this._ctx.font = this._getFont(terminal, false, false);\n    this._ctx.textBaseline = 'middle';\n    this._clipRow(terminal, y);\n    this._ctx.fillText(\n        cell.getChars(),\n        x * this._scaledCellWidth + this._scaledCharLeft,\n        y * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight / 2);\n  }\n\n  /**\n   * Clips a row to ensure no pixels will be drawn outside the cells in the row.\n   * @param terminal The terminal.\n   * @param y The row to clip.\n   */\n  private _clipRow(terminal: Terminal, y: number): void {\n    this._ctx.beginPath();\n    this._ctx.rect(\n        0,\n        y * this._scaledCellHeight,\n        terminal.cols * this._scaledCellWidth,\n        this._scaledCellHeight);\n    this._ctx.clip();\n  }\n\n  /**\n   * Gets the current font.\n   * @param terminal The terminal.\n   * @param isBold If we should use the bold fontWeight.\n   */\n  protected _getFont(terminal: Terminal, isBold: boolean, isItalic: boolean): string {\n    const fontWeight = isBold ? terminal.getOption('fontWeightBold') : terminal.getOption('fontWeight');\n    const fontStyle = isItalic ? 'italic' : '';\n\n    return `${fontStyle} ${fontWeight} ${terminal.getOption('fontSize') * window.devicePixelRatio}px ${terminal.getOption('fontFamily')}`;\n  }\n}\n\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { generateConfig, configEquals } from './CharAtlasUtils';\nimport { WebglCharAtlas } from './WebglCharAtlas';\nimport { ICharAtlasConfig } from './Types';\nimport { Terminal } from 'xterm';\nimport { IColorSet } from 'browser/Types';\n\ninterface ICharAtlasCacheEntry {\n  atlas: WebglCharAtlas;\n  config: ICharAtlasConfig;\n  // N.B. This implementation potentially holds onto copies of the terminal forever, so\n  // this may cause memory leaks.\n  ownedBy: Terminal[];\n}\n\nconst charAtlasCache: ICharAtlasCacheEntry[] = [];\n\n/**\n * Acquires a char atlas, either generating a new one or returning an existing\n * one that is in use by another terminal.\n * @param terminal The terminal.\n * @param colors The colors to use.\n */\nexport function acquireCharAtlas(\n  terminal: Terminal,\n  colors: IColorSet,\n  scaledCharWidth: number,\n  scaledCharHeight: number\n): WebglCharAtlas {\n  const newConfig = generateConfig(scaledCharWidth, scaledCharHeight, terminal, colors);\n\n  // Check to see if the terminal already owns this config\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    const ownedByIndex = entry.ownedBy.indexOf(terminal);\n    if (ownedByIndex >= 0) {\n      if (configEquals(entry.config, newConfig)) {\n        return entry.atlas;\n      }\n      // The configs differ, release the terminal from the entry\n      if (entry.ownedBy.length === 1) {\n        entry.atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        entry.ownedBy.splice(ownedByIndex, 1);\n      }\n      break;\n    }\n  }\n\n  // Try match a char atlas from the cache\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    if (configEquals(entry.config, newConfig)) {\n      // Add the terminal to the cache entry and return\n      entry.ownedBy.push(terminal);\n      return entry.atlas;\n    }\n  }\n\n  const newEntry: ICharAtlasCacheEntry = {\n    atlas: new WebglCharAtlas(document, newConfig),\n    config: newConfig,\n    ownedBy: [terminal]\n  };\n  charAtlasCache.push(newEntry);\n  return newEntry.atlas;\n}\n\n/**\n * Removes a terminal reference from the cache, allowing its memory to be freed.\n * @param terminal The terminal to remove.\n */\nexport function removeTerminalFromCache(terminal: Terminal): void {\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const index = charAtlasCache[i].ownedBy.indexOf(terminal);\n    if (index !== -1) {\n      if (charAtlasCache[i].ownedBy.length === 1) {\n        // Remove the cache entry if it's the only terminal\n        charAtlasCache[i].atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        // Remove the reference from the cache entry\n        charAtlasCache[i].ownedBy.splice(index, 1);\n      }\n      break;\n    }\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from './Types';\nimport { Attributes } from 'common/buffer/Constants';\nimport { Terminal, FontWeight } from 'xterm';\nimport { IColorSet, IColor } from 'browser/Types';\n\nconst NULL_COLOR: IColor = {\n  css: '',\n  rgba: 0\n};\n\nexport function generateConfig(scaledCharWidth: number, scaledCharHeight: number, terminal: Terminal, colors: IColorSet): ICharAtlasConfig {\n  // null out some fields that don't matter\n  const clonedColors: IColorSet = {\n    foreground: colors.foreground,\n    background: colors.background,\n    cursor: NULL_COLOR,\n    cursorAccent: NULL_COLOR,\n    selection: NULL_COLOR,\n    selectionOpaque: NULL_COLOR,\n    // For the static char atlas, we only use the first 16 colors, but we need all 256 for the\n    // dynamic character atlas.\n    ansi: colors.ansi.slice(),\n    contrastCache: colors.contrastCache\n  };\n  return {\n    devicePixelRatio: window.devicePixelRatio,\n    scaledCharWidth,\n    scaledCharHeight,\n    fontFamily: terminal.getOption('fontFamily'),\n    fontSize: terminal.getOption('fontSize'),\n    fontWeight: terminal.getOption('fontWeight') as FontWeight,\n    fontWeightBold: terminal.getOption('fontWeightBold') as FontWeight,\n    allowTransparency: terminal.getOption('allowTransparency'),\n    drawBoldTextInBrightColors: terminal.getOption('drawBoldTextInBrightColors'),\n    minimumContrastRatio: terminal.getOption('minimumContrastRatio'),\n    colors: clonedColors\n  };\n}\n\nexport function configEquals(a: ICharAtlasConfig, b: ICharAtlasConfig): boolean {\n  for (let i = 0; i < a.colors.ansi.length; i++) {\n    if (a.colors.ansi[i].rgba !== b.colors.ansi[i].rgba) {\n      return false;\n    }\n  }\n  return a.devicePixelRatio === b.devicePixelRatio &&\n      a.fontFamily === b.fontFamily &&\n      a.fontSize === b.fontSize &&\n      a.fontWeight === b.fontWeight &&\n      a.fontWeightBold === b.fontWeightBold &&\n      a.allowTransparency === b.allowTransparency &&\n      a.scaledCharWidth === b.scaledCharWidth &&\n      a.scaledCharHeight === b.scaledCharHeight &&\n      a.drawBoldTextInBrightColors === b.drawBoldTextInBrightColors &&\n      a.minimumContrastRatio === b.minimumContrastRatio &&\n      a.colors.foreground === b.colors.foreground &&\n      a.colors.background === b.colors.background;\n}\n\nexport function is256Color(colorCode: number): boolean {\n  return (colorCode & Attributes.CM_MASK) === Attributes.CM_P16 || (colorCode & Attributes.CM_MASK) === Attributes.CM_P256;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const INVERTED_DEFAULT_COLOR = 257;\nexport const DIM_OPACITY = 0.5;\n\nexport const CHAR_ATLAS_CELL_SPACING = 1;\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n  static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    return newObj;\n  }\n\n  // data\n  public fg: number = 0;\n  public bg: number = 0;\n\n  // flags\n  public isInverse(): number   { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number      { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number { return this.fg & FgFlags.UNDERLINE; }\n  public isBlink(): number     { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number    { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number       { return this.bg & BgFlags.DIM; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content: number = 0;\n  public fg: number = 0;\n  public bg: number = 0;\n  public combinedData: string = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   * */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal, ITerminalAddon } from 'xterm';\nimport { WebglRenderer } from './WebglRenderer';\nimport { IRenderService } from 'browser/services/Services';\nimport { IColorSet } from 'browser/Types';\n\nexport class WebglAddon implements ITerminalAddon {\n  private _terminal?: Terminal;\n\n  constructor(\n    private _preserveDrawingBuffer?: boolean\n  ) {}\n\n  public activate(terminal: Terminal): void {\n    if (!terminal.element) {\n      throw new Error('Cannot activate WebglAddon before Terminal.open');\n    }\n    this._terminal = terminal;\n    const renderService: IRenderService =  (<any>terminal)._core._renderService;\n    const colors: IColorSet = (<any>terminal)._core._colorManager.colors;\n    renderService.setRenderer(new WebglRenderer(terminal, colors, this._preserveDrawingBuffer));\n  }\n\n  public dispose(): void {\n    if (!this._terminal) {\n      throw new Error('Cannot dispose WebglAddon because it is activated');\n    }\n    const renderService: IRenderService = (<any>this._terminal)._core._renderService;\n    renderService.setRenderer((<any>this._terminal)._core._createRenderer());\n    renderService.onResize(this._terminal.cols, this._terminal.rows);\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminal } from '../../../src/Types';\nimport { GlyphRenderer } from './GlyphRenderer';\nimport { LinkRenderLayer } from './renderLayer/LinkRenderLayer';\nimport { CursorRenderLayer } from './renderLayer/CursorRenderLayer';\nimport { acquireCharAtlas } from './atlas/CharAtlasCache';\nimport { WebglCharAtlas } from './atlas/WebglCharAtlas';\nimport { RectangleRenderer } from './RectangleRenderer';\nimport { IWebGL2RenderingContext } from './Types';\nimport { RenderModel, COMBINED_CHAR_BIT_MASK, RENDER_MODEL_BG_OFFSET, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_INDICIES_PER_CELL } from './RenderModel';\nimport { Disposable } from 'common/Lifecycle';\nimport { NULL_CELL_CODE } from 'common/buffer/Constants';\nimport { Terminal, IEvent } from 'xterm';\nimport { IRenderLayer } from './renderLayer/Types';\nimport { IRenderDimensions, IRenderer, IRequestRefreshRowsEvent } from 'browser/renderer/Types';\nimport { IColorSet } from 'browser/Types';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { CellData } from 'common/buffer/CellData';\n\nexport class WebglRenderer extends Disposable implements IRenderer {\n  private _renderLayers: IRenderLayer[];\n  private _charAtlas: WebglCharAtlas | undefined;\n  private _devicePixelRatio: number;\n\n  private _model: RenderModel = new RenderModel();\n  private _workCell: CellData = new CellData();\n\n  private _canvas: HTMLCanvasElement;\n  private _gl: IWebGL2RenderingContext;\n  private _rectangleRenderer: RectangleRenderer;\n  private _glyphRenderer: GlyphRenderer;\n\n  public dimensions: IRenderDimensions;\n\n  private _core: ITerminal;\n\n  private _onRequestRefreshRows = new EventEmitter<IRequestRefreshRowsEvent>();\n  public get onRequestRefreshRows(): IEvent<IRequestRefreshRowsEvent> { return this._onRequestRefreshRows.event; }\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    preserveDrawingBuffer?: boolean\n  ) {\n    super();\n\n    this._core = (<any>this._terminal)._core;\n\n    this._renderLayers = [\n      new LinkRenderLayer(this._core.screenElement, 2, this._colors, this._core),\n      new CursorRenderLayer(this._core.screenElement, 3, this._colors, this._onRequestRefreshRows)\n    ];\n    this.dimensions = {\n      scaledCharWidth: 0,\n      scaledCharHeight: 0,\n      scaledCellWidth: 0,\n      scaledCellHeight: 0,\n      scaledCharLeft: 0,\n      scaledCharTop: 0,\n      scaledCanvasWidth: 0,\n      scaledCanvasHeight: 0,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      actualCellWidth: 0,\n      actualCellHeight: 0\n    };\n    this._devicePixelRatio = window.devicePixelRatio;\n    this._updateDimensions();\n\n    this._canvas = document.createElement('canvas');\n\n    const contextAttributes = {\n      antialias: false,\n      depth: false,\n      preserveDrawingBuffer\n    };\n    this._gl = this._canvas.getContext('webgl2', contextAttributes) as IWebGL2RenderingContext;\n    if (!this._gl) {\n        throw new Error('WebGL2 not supported');\n    }\n    this._core.screenElement.appendChild(this._canvas);\n\n    this._rectangleRenderer = new RectangleRenderer(this._terminal, this._colors, this._gl, this.dimensions);\n    this._glyphRenderer = new GlyphRenderer(this._terminal, this._colors, this._gl, this.dimensions);\n\n    // Update dimensions and acquire char atlas\n    this.onCharSizeChanged();\n  }\n\n  public dispose(): void {\n    this._renderLayers.forEach(l => l.dispose());\n    this._core.screenElement.removeChild(this._canvas);\n    super.dispose();\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._colors = colors;\n\n    // Clear layers and force a full render\n    this._renderLayers.forEach(l => {\n      l.setColors(this._terminal, this._colors);\n      l.reset(this._terminal);\n    });\n\n    this._rectangleRenderer.setColors();\n    this._glyphRenderer.setColors();\n\n    this._refreshCharAtlas();\n\n    // Force a full refresh\n    this._model.clear();\n  }\n\n  public onDevicePixelRatioChange(): void {\n    // If the device pixel ratio changed, the char atlas needs to be regenerated\n    // and the terminal needs to refreshed\n    if (this._devicePixelRatio !== window.devicePixelRatio) {\n      this._devicePixelRatio = window.devicePixelRatio;\n      this.onResize(this._terminal.cols, this._terminal.rows);\n    }\n  }\n\n  public onResize(cols: number, rows: number): void {\n    // Update character and canvas dimensions\n    this._updateDimensions();\n\n    this._model.resize(this._terminal.cols, this._terminal.rows);\n    this._rectangleRenderer.onResize();\n\n    // Resize all render layers\n    this._renderLayers.forEach(l => l.resize(this._terminal, this.dimensions));\n\n    // Resize the canvas\n    this._canvas.width = this.dimensions.scaledCanvasWidth;\n    this._canvas.height = this.dimensions.scaledCanvasHeight;\n    this._canvas.style.width = `${this.dimensions.canvasWidth}px`;\n    this._canvas.style.height = `${this.dimensions.canvasHeight}px`;\n\n    // Resize the screen\n    this._core.screenElement.style.width = `${this.dimensions.canvasWidth}px`;\n    this._core.screenElement.style.height = `${this.dimensions.canvasHeight}px`;\n    this._glyphRenderer.setDimensions(this.dimensions);\n    this._glyphRenderer.onResize();\n\n    this._refreshCharAtlas();\n\n    // Force a full refresh\n    this._model.clear();\n  }\n\n  public onCharSizeChanged(): void {\n    this.onResize(this._terminal.cols, this._terminal.rows);\n  }\n\n  public onBlur(): void {\n    this._renderLayers.forEach(l => l.onBlur(this._terminal));\n  }\n\n  public onFocus(): void {\n    this._renderLayers.forEach(l => l.onFocus(this._terminal));\n  }\n\n  public onSelectionChanged(start: [number, number], end: [number, number], columnSelectMode: boolean): void {\n    this._renderLayers.forEach(l => l.onSelectionChanged(this._terminal, start, end, columnSelectMode));\n\n    this._updateSelectionModel(start, end);\n\n    this._rectangleRenderer.updateSelection(this._model.selection, columnSelectMode);\n    this._glyphRenderer.updateSelection(this._model, columnSelectMode);\n\n    this._onRequestRefreshRows.fire({ start: 0, end: this._terminal.rows - 1 });\n  }\n\n  public onCursorMove(): void {\n    this._renderLayers.forEach(l => l.onCursorMove(this._terminal));\n  }\n\n  public onOptionsChanged(): void {\n    this._renderLayers.forEach(l => l.onOptionsChanged(this._terminal));\n    this._updateDimensions();\n    this._refreshCharAtlas();\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param terminal The terminal.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(): void {\n    if (this.dimensions.scaledCharWidth <= 0 && this.dimensions.scaledCharHeight <= 0) {\n      return;\n    }\n\n    const atlas = acquireCharAtlas(this._terminal, this._colors, this.dimensions.scaledCharWidth, this.dimensions.scaledCharHeight);\n    if (!('getRasterizedGlyph' in atlas)) {\n      throw new Error('The webgl renderer only works with the webgl char atlas');\n    }\n    this._charAtlas = atlas as WebglCharAtlas;\n    this._charAtlas.warmUp();\n    this._glyphRenderer.setAtlas(this._charAtlas);\n  }\n\n  public clear(): void {\n    this._renderLayers.forEach(l => l.reset(this._terminal));\n  }\n\n  public registerCharacterJoiner(handler: (text: string) => [number, number][]): number {\n    return -1;\n  }\n\n  public deregisterCharacterJoiner(joinerId: number): boolean {\n    return false;\n  }\n\n  public renderRows(start: number, end: number): void {\n    // Update render layers\n    this._renderLayers.forEach(l => l.onGridChanged(this._terminal, start, end));\n\n    // Tell renderer the frame is beginning\n    if (this._glyphRenderer.beginFrame()) {\n      this._model.clear();\n    }\n\n    // Update model to reflect what's drawn\n    this._updateModel(start, end);\n\n    // Render\n    this._rectangleRenderer.render();\n    this._glyphRenderer.render(this._model, this._model.selection.hasSelection);\n  }\n\n  private _updateModel(start: number, end: number): void {\n    const terminal = this._core;\n\n    for (let y = start; y <= end; y++) {\n      const row = y + terminal.buffer.ydisp;\n      const line = terminal.buffer.lines.get(row)!;\n      this._model.lineLengths[y] = 0;\n      for (let x = 0; x < terminal.cols; x++) {\n        line.loadCell(x, this._workCell);\n\n        const chars = this._workCell.getChars();\n        let code = this._workCell.getCode();\n        const i = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n\n        if (code !== NULL_CELL_CODE) {\n          this._model.lineLengths[y] = x + 1;\n        }\n\n        // Nothing has changed, no updates needed\n        if (this._model.cells[i] === code &&\n            this._model.cells[i + RENDER_MODEL_BG_OFFSET] === this._workCell.bg &&\n            this._model.cells[i + RENDER_MODEL_FG_OFFSET] === this._workCell.fg) {\n          continue;\n        }\n\n        // Flag combined chars with a bit mask so they're easily identifiable\n        if (chars.length > 1) {\n          code = code | COMBINED_CHAR_BIT_MASK;\n        }\n\n        // Cache the results in the model\n        this._model.cells[i] = code;\n        this._model.cells[i + RENDER_MODEL_BG_OFFSET] = this._workCell.bg;\n        this._model.cells[i + RENDER_MODEL_FG_OFFSET] = this._workCell.fg;\n\n        this._glyphRenderer.updateCell(x, y, code, this._workCell.bg, this._workCell.fg, chars);\n      }\n    }\n    this._rectangleRenderer.updateBackgrounds(this._model);\n  }\n\n  private _updateSelectionModel(start: [number, number], end: [number, number]): void {\n    const terminal = this._terminal;\n\n    // Selection does not exist\n    if (!start || !end || (start[0] === end[0] && start[1] === end[1])) {\n      this._model.clearSelection();\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - terminal.buffer.viewportY;\n    const viewportEndRow = end[1] - terminal.buffer.viewportY;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, terminal.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= terminal.rows || viewportCappedEndRow < 0) {\n      this._model.clearSelection();\n      return;\n    }\n\n    this._model.selection.hasSelection = true;\n    this._model.selection.viewportStartRow = viewportStartRow;\n    this._model.selection.viewportEndRow = viewportEndRow;\n    this._model.selection.viewportCappedStartRow = viewportCappedStartRow;\n    this._model.selection.viewportCappedEndRow = viewportCappedEndRow;\n    this._model.selection.startCol = start[0];\n    this._model.selection.endCol = end[0];\n  }\n\n  /**\n   * Recalculates the character and canvas dimensions.\n   */\n  private _updateDimensions(): void {\n    // TODO: Acquire CharSizeService properly\n\n    // Perform a new measure if the CharMeasure dimensions are not yet available\n    if (!(<any>this._core)._charSizeService.width || !(<any>this._core)._charSizeService.height) {\n      return;\n    }\n\n    // Calculate the scaled character width. Width is floored as it must be\n    // drawn to an integer grid in order for the CharAtlas \"stamps\" to not be\n    // blurry. When text is drawn to the grid not using the CharAtlas, it is\n    // clipped to ensure there is no overlap with the next cell.\n\n    // NOTE: ceil fixes sometime, floor does others :s\n\n    this.dimensions.scaledCharWidth = Math.floor((<any>this._core)._charSizeService.width * this._devicePixelRatio);\n\n    // Calculate the scaled character height. Height is ceiled in case\n    // devicePixelRatio is a floating point number in order to ensure there is\n    // enough space to draw the character to the cell.\n    this.dimensions.scaledCharHeight = Math.ceil((<any>this._core)._charSizeService.height * this._devicePixelRatio);\n\n    // Calculate the scaled cell height, if lineHeight is not 1 then the value\n    // will be floored because since lineHeight can never be lower then 1, there\n    // is a guarentee that the scaled line height will always be larger than\n    // scaled char height.\n    this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._terminal.getOption('lineHeight'));\n\n    // Calculate the y coordinate within a cell that text should draw from in\n    // order to draw in the center of a cell.\n    this.dimensions.scaledCharTop = this._terminal.getOption('lineHeight') === 1 ? 0 : Math.round((this.dimensions.scaledCellHeight - this.dimensions.scaledCharHeight) / 2);\n\n    // Calculate the scaled cell width, taking the letterSpacing into account.\n    this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._terminal.getOption('letterSpacing'));\n\n    // Calculate the x coordinate with a cell that text should draw from in\n    // order to draw in the center of a cell.\n    this.dimensions.scaledCharLeft = Math.floor(this._terminal.getOption('letterSpacing') / 2);\n\n    // Recalculate the canvas dimensions; scaled* define the actual number of\n    // pixel in the canvas\n    this.dimensions.scaledCanvasHeight = this._terminal.rows * this.dimensions.scaledCellHeight;\n    this.dimensions.scaledCanvasWidth = this._terminal.cols * this.dimensions.scaledCellWidth;\n\n    // The the size of the canvas on the page. It's very important that this\n    // rounds to nearest integer and not ceils as browsers often set\n    // window.devicePixelRatio as something like 1.100000023841858, when it's\n    // actually 1.1. Ceiling causes blurriness as the backing canvas image is 1\n    // pixel too large for the canvas element size.\n    this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / this._devicePixelRatio);\n    this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / this._devicePixelRatio);\n\n    // this.dimensions.scaledCanvasHeight = this.dimensions.canvasHeight * devicePixelRatio;\n    // this.dimensions.scaledCanvasWidth = this.dimensions.canvasWidth * devicePixelRatio;\n\n    // Get the _actual_ dimensions of an individual cell. This needs to be\n    // derived from the canvasWidth/Height calculated above which takes into\n    // account window.devicePixelRatio. CharMeasure.width/height by itself is\n    // insufficient when the page is not at 100% zoom level as CharMeasure is\n    // measured in CSS pixels, but the actual char size on the canvas can\n    // differ.\n    // this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._terminal.rows;\n    // this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._terminal.cols;\n\n    // This fixes 110% and 125%, not 150% or 175% though\n    this.dimensions.actualCellHeight = this.dimensions.scaledCellHeight / this._devicePixelRatio;\n    this.dimensions.actualCellWidth = this.dimensions.scaledCellWidth / this._devicePixelRatio;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { createProgram, PROJECTION_MATRIX, throwIfFalsy } from './WebglUtils';\nimport { WebglCharAtlas } from './atlas/WebglCharAtlas';\nimport { IWebGL2RenderingContext, IWebGLVertexArrayObject, IRenderModel, IRasterizedGlyph } from './Types';\nimport { COMBINED_CHAR_BIT_MASK, RENDER_MODEL_INDICIES_PER_CELL, RENDER_MODEL_FG_OFFSET } from './RenderModel';\nimport { fill } from 'common/TypedArrayUtils';\nimport { slice } from './TypedArray';\nimport { NULL_CELL_CODE, WHITESPACE_CELL_CODE, Attributes } from 'common/buffer/Constants';\nimport { Terminal, IBufferLine } from 'xterm';\nimport { IColorSet } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\n\ninterface IVertices {\n  attributes: Float32Array;\n  /**\n   * These buffers are the ones used to bind to WebGL, the reason there are\n   * multiple is to allow double buffering to work as you cannot modify the\n   * buffer while it's being used by the GPU. Having multiple lets us start\n   * working on the next frame.\n   */\n  attributesBuffers: Float32Array[];\n  selectionAttributes: Float32Array;\n  count: number;\n}\n\nconst enum VertexAttribLocations {\n  UNIT_QUAD = 0,\n  CELL_POSITION = 1,\n  OFFSET = 2,\n  SIZE = 3,\n  TEXCOORD = 4,\n  TEXSIZE = 5\n}\n\nconst vertexShaderSource = `#version 300 es\nlayout (location = ${VertexAttribLocations.UNIT_QUAD}) in vec2 a_unitquad;\nlayout (location = ${VertexAttribLocations.CELL_POSITION}) in vec2 a_cellpos;\nlayout (location = ${VertexAttribLocations.OFFSET}) in vec2 a_offset;\nlayout (location = ${VertexAttribLocations.SIZE}) in vec2 a_size;\nlayout (location = ${VertexAttribLocations.TEXCOORD}) in vec2 a_texcoord;\nlayout (location = ${VertexAttribLocations.TEXSIZE}) in vec2 a_texsize;\n\nuniform mat4 u_projection;\nuniform vec2 u_resolution;\n\nout vec2 v_texcoord;\n\nvoid main() {\n  vec2 zeroToOne = (a_offset / u_resolution) + a_cellpos + (a_unitquad * a_size);\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\n  v_texcoord = a_texcoord + a_unitquad * a_texsize;\n}`;\n\nconst fragmentShaderSource = `#version 300 es\nprecision lowp float;\n\nin vec2 v_texcoord;\n\nuniform sampler2D u_texture;\n\nout vec4 outColor;\n\nvoid main() {\n  outColor = texture(u_texture, v_texcoord);\n}`;\n\nconst INDICES_PER_CELL = 10;\nconst BYTES_PER_CELL = INDICES_PER_CELL * Float32Array.BYTES_PER_ELEMENT;\nconst CELL_POSITION_INDICES = 2;\n\nexport class GlyphRenderer {\n  private _atlas: WebglCharAtlas | undefined;\n\n  private _program: WebGLProgram;\n  private _vertexArrayObject: IWebGLVertexArrayObject;\n  private _projectionLocation: WebGLUniformLocation;\n  private _resolutionLocation: WebGLUniformLocation;\n  private _textureLocation: WebGLUniformLocation;\n  private _atlasTexture: WebGLTexture;\n  private _attributesBuffer: WebGLBuffer;\n  private _activeBuffer: number = 0;\n\n  private _vertices: IVertices = {\n    count: 0,\n    attributes: new Float32Array(0),\n    attributesBuffers: [\n      new Float32Array(0),\n      new Float32Array(0)\n    ],\n    selectionAttributes: new Float32Array(0)\n  };\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    private _gl: IWebGL2RenderingContext,\n    private _dimensions: IRenderDimensions\n  ) {\n    const gl = this._gl;\n\n    const program = throwIfFalsy(createProgram(gl, vertexShaderSource, fragmentShaderSource));\n    this._program = program;\n\n    // Uniform locations\n    this._projectionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_projection'));\n    this._resolutionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_resolution'));\n    this._textureLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_texture'));\n\n    // Create and set the vertex array object\n    this._vertexArrayObject = gl.createVertexArray();\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Setup a_unitquad, this defines the 4 vertices of a rectangle\n    const unitQuadVertices = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const unitQuadVerticesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, unitQuadVerticesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, unitQuadVertices, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(VertexAttribLocations.UNIT_QUAD);\n    gl.vertexAttribPointer(VertexAttribLocations.UNIT_QUAD, 2, this._gl.FLOAT, false, 0, 0);\n\n    // Setup the unit quad element array buffer, this points to indices in\n    // unitQuadVertuces to allow is to draw 2 triangles from the vertices\n    const unitQuadElementIndices = new Uint8Array([0, 1, 3, 0, 2, 3]);\n    const elementIndicesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementIndicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, unitQuadElementIndices, gl.STATIC_DRAW);\n\n    // Setup attributes\n    this._attributesBuffer = throwIfFalsy(gl.createBuffer());\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.enableVertexAttribArray(VertexAttribLocations.OFFSET);\n    gl.vertexAttribPointer(VertexAttribLocations.OFFSET, 2, gl.FLOAT, false, BYTES_PER_CELL, 0);\n    gl.vertexAttribDivisor(VertexAttribLocations.OFFSET, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.SIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.SIZE, 2, gl.FLOAT, false, BYTES_PER_CELL, 2 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.SIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXCOORD);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXCOORD, 2, gl.FLOAT, false, BYTES_PER_CELL, 4 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXCOORD, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXSIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXSIZE, 2, gl.FLOAT, false, BYTES_PER_CELL, 6 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXSIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.CELL_POSITION);\n    gl.vertexAttribPointer(VertexAttribLocations.CELL_POSITION, 2, gl.FLOAT, false, BYTES_PER_CELL, 8 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.CELL_POSITION, 1);\n\n    // Setup empty texture atlas\n    this._atlasTexture = throwIfFalsy(gl.createTexture());\n    gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255]));\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    // Allow drawing of transparent texture\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    // Set viewport\n    this.onResize();\n  }\n\n  public beginFrame(): boolean {\n    return this._atlas ? this._atlas.beginFrame() : true;\n  }\n\n  public updateCell(x: number, y: number, code: number, bg: number, fg: number, chars: string): void {\n    this._updateCell(this._vertices.attributes, x, y, code, bg, fg, chars);\n  }\n\n  private _updateCell(array: Float32Array, x: number, y: number, code: number | undefined, bg: number, fg: number, chars?: string): void {\n    const terminal = this._terminal;\n\n    const i = (y * terminal.cols + x) * INDICES_PER_CELL;\n\n    // Exit early if this is a null/space character\n    if (code === NULL_CELL_CODE || code === WHITESPACE_CELL_CODE || code === undefined/* This is used for the right side of wide chars */) {\n      fill(array, 0, i, i + INDICES_PER_CELL - 1 - CELL_POSITION_INDICES);\n      return;\n    }\n\n    let rasterizedGlyph: IRasterizedGlyph;\n    if (!this._atlas) {\n      throw new Error('atlas must be set before updating cell');\n    }\n    if (chars && chars.length > 1) {\n      rasterizedGlyph = this._atlas.getRasterizedGlyphCombinedChar(chars, bg, fg);\n    } else {\n      rasterizedGlyph = this._atlas.getRasterizedGlyph(code, bg, fg);\n    }\n\n    // Fill empty if no glyph was found\n    if (!rasterizedGlyph) {\n      fill(array, 0, i, i + INDICES_PER_CELL - 1 - CELL_POSITION_INDICES);\n      return;\n    }\n\n    // a_origin\n    array[i    ] = -rasterizedGlyph.offset.x + this._dimensions.scaledCharLeft;\n    array[i + 1] = -rasterizedGlyph.offset.y + this._dimensions.scaledCharTop;\n    // a_size\n    array[i + 2] = rasterizedGlyph.size.x / this._dimensions.scaledCanvasWidth;\n    array[i + 3] = rasterizedGlyph.size.y / this._dimensions.scaledCanvasHeight;\n    // a_texcoord\n    array[i + 4] = rasterizedGlyph.texturePositionClipSpace.x;\n    array[i + 5] = rasterizedGlyph.texturePositionClipSpace.y;\n    // a_texsize\n    array[i + 6] = rasterizedGlyph.sizeClipSpace.x;\n    array[i + 7] = rasterizedGlyph.sizeClipSpace.y;\n    // a_cellpos only changes on resize\n  }\n\n  public updateSelection(model: IRenderModel, columnSelectMode: boolean): void {\n    const terminal = this._terminal;\n\n    this._vertices.selectionAttributes = slice(this._vertices.attributes, 0);\n\n    const bg = (this._colors.selectionOpaque.rgba >>> 8) | Attributes.CM_RGB;\n\n    if (columnSelectMode) {\n      const startCol = model.selection.startCol;\n      const width = model.selection.endCol - startCol;\n      const height = model.selection.viewportCappedEndRow - model.selection.viewportCappedStartRow + 1;\n      for (let y = model.selection.viewportCappedStartRow; y < model.selection.viewportCappedStartRow + height; y++) {\n        this._updateSelectionRange(startCol, startCol + width, y, model, bg);\n      }\n    } else {\n      // Draw first row\n      const startCol = model.selection.viewportStartRow === model.selection.viewportCappedStartRow ? model.selection.startCol : 0;\n      const startRowEndCol = model.selection.viewportCappedStartRow === model.selection.viewportCappedEndRow ? model.selection.endCol : terminal.cols;\n      this._updateSelectionRange(startCol, startRowEndCol, model.selection.viewportCappedStartRow, model, bg);\n\n      // Draw middle rows\n      const middleRowsCount = Math.max(model.selection.viewportCappedEndRow - model.selection.viewportCappedStartRow - 1, 0);\n      for (let y = model.selection.viewportCappedStartRow + 1; y <= model.selection.viewportCappedStartRow + middleRowsCount; y++) {\n        this._updateSelectionRange(0, startRowEndCol, y, model, bg);\n      }\n\n      // Draw final row\n      if (model.selection.viewportCappedStartRow !== model.selection.viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewportStartRow\n        const endCol = model.selection.viewportEndRow === model.selection.viewportCappedEndRow ? model.selection.endCol : terminal.cols;\n        this._updateSelectionRange(0, endCol, model.selection.viewportCappedEndRow, model, bg);\n      }\n    }\n  }\n\n  private _updateSelectionRange(startCol: number, endCol: number, y: number, model: IRenderModel, bg: number): void {\n    const terminal = this._terminal;\n    const row = y + terminal.buffer.viewportY;\n    let line: IBufferLine | undefined;\n    for (let x = startCol; x < endCol; x++) {\n      const offset = (y * this._terminal.cols + x) * RENDER_MODEL_INDICIES_PER_CELL;\n      const code = model.cells[offset];\n      if (code & COMBINED_CHAR_BIT_MASK) {\n        if (!line) {\n          line = terminal.buffer.getLine(row);\n        }\n        const chars = line!.getCell(x)!.char;\n        this._updateCell(this._vertices.selectionAttributes, x, y, model.cells[offset], bg, model.cells[offset + RENDER_MODEL_FG_OFFSET], chars);\n      } else {\n        this._updateCell(this._vertices.selectionAttributes, x, y, model.cells[offset], bg, model.cells[offset + RENDER_MODEL_FG_OFFSET]);\n      }\n    }\n  }\n\n  public onResize(): void {\n    const terminal = this._terminal;\n    const gl = this._gl;\n\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    // Update vertices\n    const newCount = terminal.cols * terminal.rows * INDICES_PER_CELL;\n    if (this._vertices.count !== newCount) {\n      this._vertices.count = newCount;\n      this._vertices.attributes = new Float32Array(newCount);\n      for (let i = 0; i < this._vertices.attributesBuffers.length; i++) {\n        this._vertices.attributesBuffers[i] = new Float32Array(newCount);\n      }\n\n      let i = 0;\n      for (let y = 0; y < terminal.rows; y++) {\n        for (let x = 0; x < terminal.cols; x++) {\n          this._vertices.attributes[i + 8] = x / terminal.cols;\n          this._vertices.attributes[i + 9] = y / terminal.rows;\n          i += INDICES_PER_CELL;\n        }\n      }\n    }\n  }\n\n  public setColors(): void {\n  }\n\n  public render(renderModel: IRenderModel, isSelectionVisible: boolean): void {\n    if (!this._atlas) {\n      return;\n    }\n\n    const gl = this._gl;\n\n    gl.useProgram(this._program);\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Alternate buffers each frame as the active buffer gets locked while it's in use by the GPU\n    this._activeBuffer = (this._activeBuffer + 1) % 2;\n    const activeBuffer = this._vertices.attributesBuffers[this._activeBuffer];\n\n    // Copy data for each cell of each line up to its line length (the last non-whitespace cell)\n    // from the attributes buffer into activeBuffer, which is the one that gets bound to the GPU.\n    // The reasons for this are as follows:\n    // - So the active buffer can be alternated so we don't get blocked on rendering finishing\n    // - To copy either the normal attributes buffer or the selection attributes buffer when there\n    //   is a selection\n    // - So we don't send vertices for all the line-ending whitespace to the GPU\n    let bufferLength = 0;\n    for (let y = 0; y < renderModel.lineLengths.length; y++) {\n      const si = y * this._terminal.cols * INDICES_PER_CELL;\n      const sub = (isSelectionVisible ? this._vertices.selectionAttributes : this._vertices.attributes).subarray(si, si + renderModel.lineLengths[y] * INDICES_PER_CELL);\n      activeBuffer.set(sub, bufferLength);\n      bufferLength += sub.length;\n    }\n\n    // Bind the attributes buffer\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, activeBuffer.subarray(0, bufferLength), gl.STREAM_DRAW);\n\n    // Bind the texture atlas if it's changed\n    if (this._atlas.hasCanvasChanged) {\n      this._atlas.hasCanvasChanged = false;\n      gl.uniform1i(this._textureLocation, 0);\n      gl.activeTexture(gl.TEXTURE0 + 0);\n      gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this._atlas.cacheCanvas);\n      gl.generateMipmap(gl.TEXTURE_2D);\n    }\n\n    // Set uniforms\n    gl.uniformMatrix4fv(this._projectionLocation, false, PROJECTION_MATRIX);\n    gl.uniform2f(this._resolutionLocation, gl.canvas.width, gl.canvas.height);\n\n    // Draw the viewport\n    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, bufferLength / INDICES_PER_CELL);\n  }\n\n  public setAtlas(atlas: WebglCharAtlas): void {\n    const gl = this._gl;\n    this._atlas = atlas;\n\n    gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, atlas.cacheCanvas);\n    gl.generateMipmap(gl.TEXTURE_2D);\n  }\n\n  public setDimensions(dimensions: IRenderDimensions): void {\n    this._dimensions = dimensions;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport type TypedArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray\n  | Int8Array | Int16Array | Int32Array\n  | Float32Array | Float64Array;\n\nexport function slice<T extends TypedArray>(array: T, start?: number, end?: number): T {\n  // all modern engines that support .slice\n  if (array.slice) {\n    return array.slice(start, end) as T;\n  }\n  return sliceFallback(array, start, end);\n}\n\nexport function sliceFallback<T extends TypedArray>(array: T, start: number = 0, end: number = array.length): T {\n  if (start < 0) {\n    start = (array.length + start) % array.length;\n  }\n  if (end >= array.length) {\n    end = array.length;\n  } else {\n    end = (array.length + end) % array.length;\n  }\n  start = Math.min(start, end);\n\n  const result: T = new (array.constructor as any)(end - start);\n  for (let i = 0; i < end - start; ++i) {\n    result[i] = array[i + start];\n  }\n  return result;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ILinkifierAccessor } from '../../../../src/Types';\nimport { Terminal } from 'xterm';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/atlas/Constants';\nimport { is256Color } from '../atlas/CharAtlasUtils';\nimport { IColorSet, ILinkifierEvent } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\n\nexport class LinkRenderLayer extends BaseRenderLayer {\n  private _state: ILinkifierEvent | undefined;\n\n  constructor(container: HTMLElement, zIndex: number, colors: IColorSet, terminal: ILinkifierAccessor) {\n    super(container, 'link', zIndex, true, colors);\n    terminal.linkifier.onLinkHover(e => this._onLinkHover(e));\n    terminal.linkifier.onLinkLeave(e => this._onLinkLeave(e));\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    super.resize(terminal, dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = undefined;\n  }\n\n  public reset(terminal: Terminal): void {\n    this._clearCurrentLink();\n  }\n\n  private _clearCurrentLink(): void {\n    if (this._state) {\n      this._clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);\n      const middleRowCount = this._state.y2 - this._state.y1 - 1;\n      if (middleRowCount > 0) {\n        this._clearCells(0, this._state.y1 + 1, this._state.cols, middleRowCount);\n      }\n      this._clearCells(0, this._state.y2, this._state.x2, 1);\n      this._state = undefined;\n    }\n  }\n\n  private _onLinkHover(e: ILinkifierEvent): void {\n    if (e.fg === INVERTED_DEFAULT_COLOR) {\n      this._ctx.fillStyle = this._colors.background.css;\n    } else if (e.fg !== undefined && is256Color(e.fg)) {\n      // 256 color support\n      this._ctx.fillStyle = this._colors.ansi[e.fg!].css;\n    } else {\n      this._ctx.fillStyle = this._colors.foreground.css;\n    }\n\n    if (e.y1 === e.y2) {\n      // Single line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.x2 - e.x1);\n    } else {\n      // Multi-line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.cols - e.x1);\n      for (let y = e.y1 + 1; y < e.y2; y++) {\n        this._fillBottomLineAtCells(0, y, e.cols);\n      }\n      this._fillBottomLineAtCells(0, e.y2, e.x2);\n    }\n    this._state = e;\n  }\n\n  private _onLinkLeave(e: ILinkifierEvent): void {\n    this._clearCurrentLink();\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from './Types';\nimport { DIM_OPACITY } from 'browser/renderer/atlas/Constants';\nimport { IRasterizedGlyph, IBoundingBox, IRasterizedGlyphSet } from '../Types';\nimport { DEFAULT_COLOR, FgFlags, Attributes, BgFlags } from 'common/buffer/Constants';\nimport { throwIfFalsy } from '../WebglUtils';\nimport { IColor } from 'browser/Types';\nimport { IDisposable } from 'xterm';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { toCss, ensureContrastRatioRgba } from 'browser/Color';\n\n// In practice we're probably never going to exhaust a texture this large. For debugging purposes,\n// however, it can be useful to set this to a really tiny value, to verify that LRU eviction works.\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 1024;\n\n/**\n * The amount of the texture to be filled before throwing it away and starting\n * again. Since the throw away and individual glyph draws don't cost too much,\n * this prevent juggling multiple textures in the GL context.\n */\nconst TEXTURE_CAPACITY = Math.floor(TEXTURE_HEIGHT * 0.8);\n\nconst TRANSPARENT_COLOR = {\n  css: 'rgba(0, 0, 0, 0)',\n  rgba: 0\n};\n\n/**\n * A shared object which is used to draw nothing for a particular cell.\n */\nconst NULL_RASTERIZED_GLYPH: IRasterizedGlyph = {\n  offset: { x: 0, y: 0 },\n  texturePosition: { x: 0, y: 0 },\n  texturePositionClipSpace: { x: 0, y: 0 },\n  size: { x: 0, y: 0 },\n  sizeClipSpace: { x: 0, y: 0 }\n};\n\nconst TMP_CANVAS_GLYPH_PADDING = 2;\n\nexport class WebglCharAtlas implements IDisposable {\n  private _didWarmUp: boolean = false;\n\n  private _cacheMap: { [code: number]: IRasterizedGlyphSet } = {};\n  private _cacheMapCombined: { [chars: string]: IRasterizedGlyphSet } = {};\n\n  // The texture that the atlas is drawn to\n  public cacheCanvas: HTMLCanvasElement;\n  private _cacheCtx: CanvasRenderingContext2D;\n\n  private _tmpCanvas: HTMLCanvasElement;\n  // A temporary context that glyphs are drawn to before being transfered to the atlas.\n  private _tmpCtx: CanvasRenderingContext2D;\n\n  // Since glyphs are expected to be around the same height, the packing\n  // strategy used it to fill a row with glyphs while keeping track of the\n  // tallest glyph in the row. Once the row is full a new row is started at\n  // (0,lastRow+lastRowTallestGlyph).\n  private _currentRowY: number = 0;\n  private _currentRowX: number = 0;\n  private _currentRowHeight: number = 0;\n\n  public hasCanvasChanged = false;\n\n  private _workBoundingBox: IBoundingBox = { top: 0, left: 0, bottom: 0, right: 0 };\n  private _workAttributeData: AttributeData = new AttributeData();\n\n  constructor(\n    document: Document,\n    private _config: ICharAtlasConfig\n  ) {\n    this.cacheCanvas = document.createElement('canvas');\n    this.cacheCanvas.width = TEXTURE_WIDTH;\n    this.cacheCanvas.height = TEXTURE_HEIGHT;\n    // The canvas needs alpha because we use clearColor to convert the background color to alpha.\n    // It might also contain some characters with transparent backgrounds if allowTransparency is\n    // set.\n    this._cacheCtx = throwIfFalsy(this.cacheCanvas.getContext('2d', {alpha: true}));\n\n    this._tmpCanvas = document.createElement('canvas');\n    this._tmpCanvas.width = this._config.scaledCharWidth * 2 + TMP_CANVAS_GLYPH_PADDING * 2;\n    this._tmpCanvas.height = this._config.scaledCharHeight + TMP_CANVAS_GLYPH_PADDING * 2;\n    this._tmpCtx = throwIfFalsy(this._tmpCanvas.getContext('2d', {alpha: this._config.allowTransparency}));\n\n    // This is useful for debugging\n    document.body.appendChild(this.cacheCanvas);\n  }\n\n  public dispose(): void {\n    if (this.cacheCanvas.parentElement) {\n      this.cacheCanvas.parentElement.removeChild(this.cacheCanvas);\n    }\n  }\n\n  public warmUp(): void {\n    if (!this._didWarmUp) {\n      this._doWarmUp();\n      this._didWarmUp = true;\n    }\n  }\n\n  protected _doWarmUp(): void {\n    // Pre-fill with ASCII 33-126\n    for (let i = 33; i < 126; i++) {\n      const rasterizedGlyph = this._drawToCache(i, DEFAULT_COLOR, DEFAULT_COLOR);\n      this._cacheMap[i] = {\n        [DEFAULT_COLOR]: {\n          [DEFAULT_COLOR]: rasterizedGlyph\n        }\n      };\n    }\n  }\n\n  public beginFrame(): boolean {\n    if (this._currentRowY > TEXTURE_CAPACITY) {\n      this._cacheCtx.clearRect(0, 0, TEXTURE_WIDTH, TEXTURE_HEIGHT);\n      this._cacheMap = {};\n      this._currentRowHeight = 0;\n      this._currentRowX = 0;\n      this._currentRowY = 0;\n      this._doWarmUp();\n      return true;\n    }\n    return false;\n  }\n\n  public getRasterizedGlyphCombinedChar(chars: string, bg: number, fg: number): IRasterizedGlyph {\n    let rasterizedGlyphSet = this._cacheMapCombined[chars];\n    if (!rasterizedGlyphSet) {\n      rasterizedGlyphSet = {};\n      this._cacheMapCombined[chars] = rasterizedGlyphSet;\n    }\n    let rasterizedGlyph: IRasterizedGlyph | undefined;\n    const rasterizedGlyphSetBg = rasterizedGlyphSet[bg];\n    if (rasterizedGlyphSetBg) {\n      rasterizedGlyph = rasterizedGlyphSetBg[fg];\n    }\n    if (!rasterizedGlyph) {\n      rasterizedGlyph = this._drawToCache(chars, bg, fg);\n      if (!rasterizedGlyphSet[bg]) {\n        rasterizedGlyphSet[bg] = {};\n      }\n      rasterizedGlyphSet[bg]![fg] = rasterizedGlyph;\n    }\n    return rasterizedGlyph;\n  }\n\n  /**\n   * Gets the glyphs texture coords, drawing the texture if it's not already\n   */\n  public getRasterizedGlyph(code: number, bg: number, fg: number): IRasterizedGlyph {\n    let rasterizedGlyphSet = this._cacheMap[code];\n    if (!rasterizedGlyphSet) {\n      rasterizedGlyphSet = {};\n      this._cacheMap[code] = rasterizedGlyphSet;\n    }\n    let rasterizedGlyph: IRasterizedGlyph | undefined;\n    const rasterizedGlyphSetBg = rasterizedGlyphSet[bg];\n    if (rasterizedGlyphSetBg) {\n      rasterizedGlyph = rasterizedGlyphSetBg[fg];\n    }\n    if (!rasterizedGlyph) {\n      rasterizedGlyph = this._drawToCache(code, bg, fg);\n      if (!rasterizedGlyphSet[bg]) {\n        rasterizedGlyphSet[bg] = {};\n      }\n      rasterizedGlyphSet[bg]![fg] = rasterizedGlyph;\n    }\n    return rasterizedGlyph;\n  }\n\n  private _getColorFromAnsiIndex(idx: number): IColor {\n    if (idx >= this._config.colors.ansi.length) {\n      throw new Error('No color found for idx ' + idx);\n    }\n    return this._config.colors.ansi[idx];\n  }\n\n  private _getBackgroundColor(bgColorMode: number, bgColor: number, inverse: boolean): IColor {\n    if (this._config.allowTransparency) {\n      // The background color might have some transparency, so we need to render it as fully\n      // transparent in the atlas. Otherwise we'd end up drawing the transparent background twice\n      // around the anti-aliased edges of the glyph, and it would look too dark.\n      return TRANSPARENT_COLOR;\n    }\n\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        return this._getColorFromAnsiIndex(bgColor);\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(bgColor);\n        // TODO: This object creation is slow\n        return {\n          rgba: bgColor << 8,\n          css: `#${toPaddedHex(arr[0])}${toPaddedHex(arr[1])}${toPaddedHex(arr[2])}`\n        };\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.foreground;\n        }\n        return this._config.colors.background;\n    }\n  }\n\n  private _getForegroundCss(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): string {\n    const minimumContrastCss = this._getMinimumContrastCss(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, inverse, bold);\n    if (minimumContrastCss) {\n      return minimumContrastCss;\n    }\n\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        return this._getColorFromAnsiIndex(fgColor).css;\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(fgColor);\n        return toCss(arr[0], arr[1], arr[2]);\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.background.css;\n        }\n        return this._config.colors.foreground.css;\n    }\n  }\n\n  private _resolveBackgroundRgba(bgColorMode: number, bgColor: number, inverse: boolean): number {\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        return this._getColorFromAnsiIndex(bgColor).rgba;\n      case Attributes.CM_RGB:\n        return bgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.foreground.rgba;\n        }\n        return this._config.colors.background.rgba;\n    }\n  }\n\n  private _resolveForegroundRgba(fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): number {\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        return this._getColorFromAnsiIndex(fgColor).rgba;\n      case Attributes.CM_RGB:\n        return fgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.background.rgba;\n        }\n        return this._config.colors.foreground.rgba;\n    }\n  }\n\n  private _getMinimumContrastCss(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): string | undefined {\n    if (this._config.minimumContrastRatio === 1) {\n      return undefined;\n    }\n\n    // Try get from cache first\n    const adjustedColor = this._config.colors.contrastCache.getCss(bg, fg);\n    if (adjustedColor !== undefined) {\n      return adjustedColor || undefined;\n    }\n\n    const bgRgba = this._resolveBackgroundRgba(bgColorMode, bgColor, inverse);\n    const fgRgba = this._resolveForegroundRgba(fgColorMode, fgColor, inverse, bold);\n    const result = ensureContrastRatioRgba(bgRgba, fgRgba, this._config.minimumContrastRatio);\n\n    if (!result) {\n      this._config.colors.contrastCache.setCss(bg, fg, null);\n      return undefined;\n    }\n\n    const css = toCss(\n      (result >> 24) & 0xFF,\n      (result >> 16) & 0xFF,\n      (result >> 8) & 0xFF\n    );\n    this._config.colors.contrastCache.setCss(bg, fg, css);\n\n    return css;\n  }\n\n  private _drawToCache(code: number, bg: number, fg: number): IRasterizedGlyph;\n  private _drawToCache(chars: string, bg: number, fg: number): IRasterizedGlyph;\n  private _drawToCache(codeOrChars: number | string, bg: number, fg: number): IRasterizedGlyph {\n    const chars = typeof codeOrChars === 'number' ? String.fromCharCode(codeOrChars) : codeOrChars;\n\n    this.hasCanvasChanged = true;\n\n    this._tmpCtx.save();\n\n    this._workAttributeData.fg = fg;\n    this._workAttributeData.bg = bg;\n\n    const bold = !!this._workAttributeData.isBold();\n    const inverse = !!this._workAttributeData.isInverse();\n    const dim = !!this._workAttributeData.isDim();\n    const italic = !!this._workAttributeData.isItalic();\n    let fgColor = this._workAttributeData.getFgColor();\n    let fgColorMode = this._workAttributeData.getFgColorMode();\n    let bgColor = this._workAttributeData.getBgColor();\n    let bgColorMode = this._workAttributeData.getBgColorMode();\n    if (inverse) {\n      const temp = fgColor;\n      fgColor = bgColor;\n      bgColor = temp;\n      const temp2 = fgColorMode;\n      fgColorMode = bgColorMode;\n      bgColorMode = temp2;\n    }\n\n    // draw the background\n    const backgroundColor = this._getBackgroundColor(bgColorMode, bgColor, inverse);\n    // Use a 'copy' composite operation to clear any existing glyph out of _tmpCtxWithAlpha, regardless of\n    // transparency in backgroundColor\n    this._tmpCtx.globalCompositeOperation = 'copy';\n    this._tmpCtx.fillStyle = backgroundColor.css;\n    this._tmpCtx.fillRect(0, 0, this._tmpCanvas.width, this._tmpCanvas.height);\n    this._tmpCtx.globalCompositeOperation = 'source-over';\n\n    // draw the foreground/glyph\n    const fontWeight = bold ? this._config.fontWeightBold : this._config.fontWeight;\n    const fontStyle = italic ? 'italic' : '';\n    this._tmpCtx.font =\n      `${fontStyle} ${fontWeight} ${this._config.fontSize * this._config.devicePixelRatio}px ${this._config.fontFamily}`;\n    this._tmpCtx.textBaseline = 'top';\n\n    this._tmpCtx.fillStyle = this._getForegroundCss(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, inverse, bold);\n\n    // Apply alpha to dim the character\n    if (dim) {\n      this._tmpCtx.globalAlpha = DIM_OPACITY;\n    }\n\n    // Draw the character\n    this._tmpCtx.fillText(chars, TMP_CANVAS_GLYPH_PADDING, TMP_CANVAS_GLYPH_PADDING);\n    this._tmpCtx.restore();\n\n    // clear the background from the character to avoid issues with drawing over the previous\n    // character if it extends past it's bounds\n    const imageData = this._tmpCtx.getImageData(\n      0, 0, this._tmpCanvas.width, this._tmpCanvas.height\n    );\n\n    // TODO: Support transparency\n    // let isEmpty = false;\n    // if (!this._config.allowTransparency) {\n    //   isEmpty = clearColor(imageData, backgroundColor);\n    // }\n\n    // Clear out the background color and determine if the glyph is empty.\n    const isEmpty = clearColor(imageData, backgroundColor);\n\n    // Handle empty glyphs\n    if (isEmpty) {\n      return NULL_RASTERIZED_GLYPH;\n    }\n\n    const rasterizedGlyph = this._findGlyphBoundingBox(imageData, this._workBoundingBox);\n    const clippedImageData = this._clipImageData(imageData, this._workBoundingBox);\n\n    // Check if there is enough room in the current row and go to next if needed\n    if (this._currentRowX + this._config.scaledCharWidth > TEXTURE_WIDTH) {\n      this._currentRowX = 0;\n      this._currentRowY += this._currentRowHeight;\n      this._currentRowHeight = 0;\n    }\n\n    // Record texture position\n    rasterizedGlyph.texturePosition.x = this._currentRowX;\n    rasterizedGlyph.texturePosition.y = this._currentRowY;\n    rasterizedGlyph.texturePositionClipSpace.x = this._currentRowX / TEXTURE_WIDTH;\n    rasterizedGlyph.texturePositionClipSpace.y = this._currentRowY / TEXTURE_HEIGHT;\n\n    // Update atlas current row\n    this._currentRowHeight = Math.max(this._currentRowHeight, rasterizedGlyph.size.y);\n    this._currentRowX += rasterizedGlyph.size.x;\n\n    // putImageData doesn't do any blending, so it will overwrite any existing cache entry for us\n    this._cacheCtx.putImageData(clippedImageData, rasterizedGlyph.texturePosition.x, rasterizedGlyph.texturePosition.y);\n\n    return rasterizedGlyph;\n  }\n\n  /**\n   * Given an ImageData object, find the bounding box of the non-transparent\n   * portion of the texture and return an IRasterizedGlyph with these\n   * dimensions.\n   * @param imageData The image data to read.\n   * @param boundingBox An IBoundingBox to put the clipped bounding box values.\n   */\n  private _findGlyphBoundingBox(imageData: ImageData, boundingBox: IBoundingBox): IRasterizedGlyph {\n    boundingBox.top = 0;\n    let found = false;\n    for (let y = 0; y < this._tmpCanvas.height; y++) {\n      for (let x = 0; x < this._tmpCanvas.width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.top = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.left = 0;\n    found = false;\n    for (let x = 0; x < this._tmpCanvas.width; x++) {\n      for (let y = 0; y < this._tmpCanvas.height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.left = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.right = this._tmpCanvas.width;\n    found = false;\n    for (let x = this._tmpCanvas.width - 1; x >= 0; x--) {\n      for (let y = 0; y < this._tmpCanvas.height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.right = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.bottom = this._tmpCanvas.height;\n    found = false;\n    for (let y = this._tmpCanvas.height - 1; y >= 0; y--) {\n      for (let x = 0; x < this._tmpCanvas.width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.bottom = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    return {\n      texturePosition: { x: 0, y: 0 },\n      texturePositionClipSpace: { x: 0, y: 0 },\n      size: {\n        x: boundingBox.right - boundingBox.left + 1,\n        y: boundingBox.bottom - boundingBox.top + 1\n      },\n      sizeClipSpace: {\n        x: (boundingBox.right - boundingBox.left + 1) / TEXTURE_WIDTH,\n        y: (boundingBox.bottom - boundingBox.top + 1) / TEXTURE_HEIGHT\n      },\n      offset: {\n        x: -boundingBox.left + TMP_CANVAS_GLYPH_PADDING,\n        y: -boundingBox.top + TMP_CANVAS_GLYPH_PADDING\n      }\n    };\n  }\n\n  private _clipImageData(imageData: ImageData, boundingBox: IBoundingBox): ImageData {\n    const width = boundingBox.right - boundingBox.left + 1;\n    const height = boundingBox.bottom - boundingBox.top + 1;\n    const clippedData = new Uint8ClampedArray(width * height * 4);\n    for (let y = boundingBox.top; y <= boundingBox.bottom; y++) {\n      for (let x = boundingBox.left; x <= boundingBox.right; x++) {\n        const oldOffset = y * this._tmpCanvas.width * 4 + x * 4;\n        const newOffset = (y - boundingBox.top) * width * 4 + (x - boundingBox.left) * 4;\n        clippedData[newOffset] = imageData.data[oldOffset];\n        clippedData[newOffset + 1] = imageData.data[oldOffset + 1];\n        clippedData[newOffset + 2] = imageData.data[oldOffset + 2];\n        clippedData[newOffset + 3] = imageData.data[oldOffset + 3];\n      }\n    }\n    return new ImageData(clippedData, width, height);\n  }\n}\n\n/**\n * Makes a partiicular rgb color in an ImageData completely transparent.\n * @returns True if the result is \"empty\", meaning all pixels are fully transparent.\n */\nfunction clearColor(imageData: ImageData, color: IColor): boolean {\n  let isEmpty = true;\n  const r = color.rgba >>> 24;\n  const g = color.rgba >>> 16 & 0xFF;\n  const b = color.rgba >>> 8 & 0xFF;\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\n    if (imageData.data[offset] === r &&\n        imageData.data[offset + 1] === g &&\n        imageData.data[offset + 2] === b) {\n      imageData.data[offset + 3] = 0;\n    } else {\n      isEmpty = false;\n    }\n  }\n  return isEmpty;\n}\n\nfunction toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\nfunction getFgColor(fg: number): number {\n  switch (fg & Attributes.CM_MASK) {\n    case Attributes.CM_P16:\n    case Attributes.CM_P256:  return fg & Attributes.PCOLOR_MASK;\n    case Attributes.CM_RGB:   return fg & Attributes.RGB_MASK;\n    default:                  return -1;  // CM_DEFAULT defaults to -1\n  }\n}\nfunction getBgColor(bg: number): number {\n  switch (bg & Attributes.CM_MASK) {\n    case Attributes.CM_P16:\n    case Attributes.CM_P256:  return bg & Attributes.PCOLOR_MASK;\n    case Attributes.CM_RGB:   return bg & Attributes.RGB_MASK;\n    default:                  return -1;  // CM_DEFAULT defaults to -1\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColor } from 'browser/Types';\n\nexport function blend(bg: IColor, fg: IColor): IColor {\n  const a = (fg.rgba & 0xFF) / 255;\n  if (a === 1) {\n    return {\n      css: fg.css,\n      rgba: fg.rgba\n    };\n  }\n  const fgR = (fg.rgba >> 24) & 0xFF;\n  const fgG = (fg.rgba >> 16) & 0xFF;\n  const fgB = (fg.rgba >> 8) & 0xFF;\n  const bgR = (bg.rgba >> 24) & 0xFF;\n  const bgG = (bg.rgba >> 16) & 0xFF;\n  const bgB = (bg.rgba >> 8) & 0xFF;\n  const r = bgR + Math.round((fgR - bgR) * a);\n  const g = bgG + Math.round((fgG - bgG) * a);\n  const b = bgB + Math.round((fgB - bgB) * a);\n  const css = toCss(r, g, b);\n  const rgba = toRgba(r, g, b);\n  return { css, rgba };\n}\n\nexport function fromCss(css: string): IColor {\n  return {\n    css,\n    rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\n  };\n}\n\nexport function toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\nexport function toCss(r: number, g: number, b: number): string {\n  return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\n}\n\nexport function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\n  // >>> 0 forces an unsigned int\n  return (r << 24 | g << 16 | b << 8 | a) >>> 0;\n}\n\n/**\n * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n * between two colors.\n * @param rgb The color to use.\n * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n */\nexport function rgbRelativeLuminance(rgb: number): number {\n  return rgbRelativeLuminance2(\n    (rgb >> 16) & 0xFF,\n    (rgb >> 8 ) & 0xFF,\n    (rgb      ) & 0xFF);\n}\n\n/**\n * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n * between two colors.\n * @param r The red channel (0x00 to 0xFF).\n * @param g The green channel (0x00 to 0xFF).\n * @param b The blue channel (0x00 to 0xFF).\n * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n */\nexport function rgbRelativeLuminance2(r: number, g: number, b: number): number {\n  const rs = r / 255;\n  const gs = g / 255;\n  const bs = b / 255;\n  const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n  const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n  const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n  return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\n}\n\n/**\n * Gets the contrast ratio between two relative luminance values.\n * @param l1 The first relative luminance.\n * @param l2 The first relative luminance.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function contrastRatio(l1: number, l2: number): number {\n  if (l1 < l2) {\n    return (l2 + 0.05) / (l1 + 0.05);\n  }\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n\nfunction rgbaToColor(r: number, g: number, b: number): IColor {\n  return {\n    css: toCss(r, g, b),\n    rgba: toRgba(r, g, b)\n  };\n}\n\nexport function ensureContrastRatioRgba(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\n  const bgL = rgbRelativeLuminance(bgRgba >> 8);\n  const fgL = rgbRelativeLuminance(fgRgba >> 8);\n  const cr = contrastRatio(bgL, fgL);\n  if (cr < ratio) {\n    if (fgL < bgL) {\n      return reduceLuminance(bgRgba, fgRgba, ratio);\n    }\n    return increaseLuminance(bgRgba, fgRgba, ratio);\n  }\n  return undefined;\n}\n\nexport function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\n  const result = ensureContrastRatioRgba(bg.rgba, fg.rgba, ratio);\n  if (!result) {\n    return undefined;\n  }\n  return rgbaToColor(\n    (result >> 24 & 0xFF),\n    (result >> 16 & 0xFF),\n    (result >> 8  & 0xFF)\n  );\n}\n\nexport function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n  // This is a naive but fast approach to reducing luminance as converting to\n  // HSL and back is expensive\n  const bgR = (bgRgba >> 24) & 0xFF;\n  const bgG = (bgRgba >> 16) & 0xFF;\n  const bgB = (bgRgba >>  8) & 0xFF;\n  let fgR = (fgRgba >> 24) & 0xFF;\n  let fgG = (fgRgba >> 16) & 0xFF;\n  let fgB = (fgRgba >>  8) & 0xFF;\n  let cr = contrastRatio(rgbRelativeLuminance2(fgR, fgB, fgG), rgbRelativeLuminance2(bgR, bgG, bgB));\n  while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\n    // Reduce by 10% until the ratio is hit\n    fgR -= Math.max(0, Math.ceil(fgR * 0.1));\n    fgG -= Math.max(0, Math.ceil(fgG * 0.1));\n    fgB -= Math.max(0, Math.ceil(fgB * 0.1));\n    cr = contrastRatio(rgbRelativeLuminance2(fgR, fgB, fgG), rgbRelativeLuminance2(bgR, bgG, bgB));\n  }\n  return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n}\n\nexport function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n  // This is a naive but fast approach to increasing luminance as converting to\n  // HSL and back is expensive\n  const bgR = (bgRgba >> 24) & 0xFF;\n  const bgG = (bgRgba >> 16) & 0xFF;\n  const bgB = (bgRgba >>  8) & 0xFF;\n  let fgR = (fgRgba >> 24) & 0xFF;\n  let fgG = (fgRgba >> 16) & 0xFF;\n  let fgB = (fgRgba >>  8) & 0xFF;\n  let cr = contrastRatio(rgbRelativeLuminance2(fgR, fgB, fgG), rgbRelativeLuminance2(bgR, bgG, bgB));\n  while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\n    // Increase by 10% until the ratio is hit\n    fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\n    fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\n    fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\n    cr = contrastRatio(rgbRelativeLuminance2(fgR, fgB, fgG), rgbRelativeLuminance2(bgR, bgG, bgB));\n  }\n  return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal } from 'xterm';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { ICellData } from 'common/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IColorSet } from 'browser/Types';\nimport { IRenderDimensions, IRequestRefreshRowsEvent } from 'browser/renderer/Types';\nimport { IEventEmitter } from 'common/EventEmitter';\n\ninterface ICursorState {\n  x: number;\n  y: number;\n  isFocused: boolean;\n  style: string;\n  width: number;\n}\n\n/**\n * The time between cursor blinks.\n */\nconst BLINK_INTERVAL = 600;\n\nexport class CursorRenderLayer extends BaseRenderLayer {\n  private _state: ICursorState;\n  private _cursorRenderers: {[key: string]: (terminal: Terminal, x: number, y: number, cell: ICellData) => void};\n  private _cursorBlinkStateManager: CursorBlinkStateManager | undefined;\n  private _cell: ICellData = new CellData();\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    private _onRequestRefreshRowsEvent: IEventEmitter<IRequestRefreshRowsEvent>\n  ) {\n    super(container, 'cursor', zIndex, true, colors);\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n    this._cursorRenderers = {\n      'bar': this._renderBarCursor.bind(this),\n      'block': this._renderBlockCursor.bind(this),\n      'underline': this._renderUnderlineCursor.bind(this)\n    };\n    // TODO: Consider initial options? Maybe onOptionsChanged should be called at the end of open?\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    super.resize(terminal, dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n  }\n\n  public reset(terminal: Terminal): void {\n    this._clearCursor();\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.dispose();\n      this.onOptionsChanged(terminal);\n    }\n  }\n\n  public onBlur(terminal: Terminal): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.pause();\n    }\n    this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.cursorY, end: terminal.buffer.cursorY });\n  }\n\n  public onFocus(terminal: Terminal): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.resume(terminal);\n    } else {\n      this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.cursorY, end: terminal.buffer.cursorY });\n    }\n  }\n\n  public onOptionsChanged(terminal: Terminal): void {\n    if (terminal.getOption('cursorBlink')) {\n      if (!this._cursorBlinkStateManager) {\n        this._cursorBlinkStateManager = new CursorBlinkStateManager(terminal, () => {\n          this._render(terminal, true);\n        });\n      }\n    } else {\n      this._cursorBlinkStateManager?.dispose();\n      this._cursorBlinkStateManager = undefined;\n    }\n    // Request a refresh from the terminal as management of rendering is being\n    // moved back to the terminal\n    this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.cursorY, end: terminal.buffer.cursorY });\n  }\n\n  public onCursorMove(terminal: Terminal): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\n    }\n  }\n\n  public onGridChanged(terminal: Terminal, startRow: number, endRow: number): void {\n    if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused) {\n      this._render(terminal, false);\n    } else {\n      this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\n    }\n  }\n\n  private _render(terminal: Terminal, triggeredByAnimationFrame: boolean): void {\n    // Don't draw the cursor if it's hidden\n    // TODO: Need to expose API for this\n    if (!(terminal as any)._core._coreService.isCursorInitialized || (terminal as any)._core._coreService.isCursorHidden) {\n      this._clearCursor();\n      return;\n    }\n\n    const cursorY = terminal.buffer.baseY + terminal.buffer.cursorY;\n    const viewportRelativeCursorY = cursorY - terminal.buffer.viewportY;\n\n    // Don't draw the cursor if it's off-screen\n    if (viewportRelativeCursorY < 0 || viewportRelativeCursorY >= terminal.rows) {\n      this._clearCursor();\n      return;\n    }\n\n    // TODO: Need fast buffer API for loading cell\n    (terminal as any)._core.buffer.lines.get(cursorY).loadCell(terminal.buffer.cursorX, this._cell);\n    if (this._cell.content === undefined) {\n      return;\n    }\n\n    if (!isTerminalFocused(terminal)) {\n      this._clearCursor();\n      this._ctx.save();\n      this._ctx.fillStyle = this._colors.cursor.css;\n      const cursorStyle = terminal.getOption('cursorStyle');\n      if (cursorStyle && cursorStyle !== 'block') {\n        this._cursorRenderers[cursorStyle](terminal, terminal.buffer.cursorX, viewportRelativeCursorY, this._cell);\n      } else {\n        this._renderBlurCursor(terminal, terminal.buffer.cursorX, viewportRelativeCursorY, this._cell);\n      }\n      this._ctx.restore();\n      this._state.x = terminal.buffer.cursorX;\n      this._state.y = viewportRelativeCursorY;\n      this._state.isFocused = false;\n      this._state.style = cursorStyle;\n      this._state.width = this._cell.getWidth();\n      return;\n    }\n\n    // Don't draw the cursor if it's blinking\n    if (this._cursorBlinkStateManager && !this._cursorBlinkStateManager.isCursorVisible) {\n      this._clearCursor();\n      return;\n    }\n\n    if (this._state) {\n      // The cursor is already in the correct spot, don't redraw\n      if (this._state.x === terminal.buffer.cursorX &&\n          this._state.y === viewportRelativeCursorY &&\n          this._state.isFocused === isTerminalFocused(terminal) &&\n          this._state.style === terminal.getOption('cursorStyle') &&\n          this._state.width === this._cell.getWidth()) {\n        return;\n      }\n      this._clearCursor();\n    }\n\n    this._ctx.save();\n    this._cursorRenderers[terminal.getOption('cursorStyle') || 'block'](terminal, terminal.buffer.cursorX, viewportRelativeCursorY, this._cell);\n    this._ctx.restore();\n\n    this._state.x = terminal.buffer.cursorX;\n    this._state.y = viewportRelativeCursorY;\n    this._state.isFocused = false;\n    this._state.style = terminal.getOption('cursorStyle');\n    this._state.width = this._cell.getWidth();\n  }\n\n  private _clearCursor(): void {\n    if (this._state) {\n      this._clearCells(this._state.x, this._state.y, this._state.width, 1);\n      this._state = {\n        x: 0,\n        y: 0,\n        isFocused: false,\n        style: '',\n        width: 0\n      };\n    }\n  }\n\n  private _renderBarCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillLeftLineAtCell(x, y);\n    this._ctx.restore();\n  }\n\n  private _renderBlockCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillCells(x, y, cell.getWidth(), 1);\n    this._ctx.fillStyle = this._colors.cursorAccent.css;\n    this._fillCharTrueColor(terminal, cell, x, y);\n    this._ctx.restore();\n  }\n\n  private _renderUnderlineCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillBottomLineAtCells(x, y);\n    this._ctx.restore();\n  }\n\n  private _renderBlurCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.strokeStyle = this._colors.cursor.css;\n    this._strokeRectAtCell(x, y, cell.getWidth(), 1);\n    this._ctx.restore();\n  }\n}\n\nclass CursorBlinkStateManager {\n  public isCursorVisible: boolean;\n\n  private _animationFrame: number | undefined;\n  private _blinkStartTimeout: number | undefined;\n  private _blinkInterval: number | undefined;\n\n  /**\n   * The time at which the animation frame was restarted, this is used on the\n   * next render to restart the timers so they don't need to restart the timers\n   * multiple times over a short period.\n   */\n  private _animationTimeRestarted: number | undefined;\n\n  constructor(\n    terminal: Terminal,\n    private _renderCallback: () => void\n  ) {\n    this.isCursorVisible = true;\n    if (isTerminalFocused(terminal)) {\n      this._restartInterval();\n    }\n  }\n\n  public get isPaused(): boolean { return !(this._blinkStartTimeout || this._blinkInterval); }\n\n  public dispose(): void {\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public restartBlinkAnimation(terminal: Terminal): void {\n    if (this.isPaused) {\n      return;\n    }\n    // Save a timestamp so that the restart can be done on the next interval\n    this._animationTimeRestarted = Date.now();\n    // Force a cursor render to ensure it's visible and in the correct position\n    this.isCursorVisible = true;\n    if (!this._animationFrame) {\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n    }\n  }\n\n  private _restartInterval(timeToStart: number = BLINK_INTERVAL): void {\n    // Clear any existing interval\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n    }\n\n    // Setup the initial timeout which will hide the cursor, this is done before\n    // the regular interval is setup in order to support restarting the blink\n    // animation in a lightweight way (without thrashing clearInterval and\n    // setInterval).\n    this._blinkStartTimeout = <number><any>setTimeout(() => {\n      // Check if another animation restart was requested while this was being\n      // started\n      if (this._animationTimeRestarted) {\n        const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n        this._animationTimeRestarted = undefined;\n        if (time > 0) {\n          this._restartInterval(time);\n          return;\n        }\n      }\n\n      // Hide the cursor\n      this.isCursorVisible = false;\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n\n      // Setup the blink interval\n      this._blinkInterval = <number><any>setInterval(() => {\n        // Adjust the animation time if it was restarted\n        if (this._animationTimeRestarted) {\n          // calc time diff\n          // Make restart interval do a setTimeout initially?\n          const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n          this._animationTimeRestarted = undefined;\n          this._restartInterval(time);\n          return;\n        }\n\n        // Invert visibility and render\n        this.isCursorVisible = !this.isCursorVisible;\n        this._animationFrame = window.requestAnimationFrame(() => {\n          this._renderCallback();\n          this._animationFrame = undefined;\n        });\n      }, BLINK_INTERVAL);\n    }, timeToStart);\n  }\n\n  public pause(): void {\n    this.isCursorVisible = true;\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public resume(terminal: Terminal): void {\n    this._animationTimeRestarted = undefined;\n    this._restartInterval();\n    this.restartBlinkAnimation(terminal);\n  }\n}\n\nfunction isTerminalFocused(terminal: Terminal): boolean {\n  return document.activeElement === terminal.textarea && document.hasFocus();\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate pair\n      // conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF)) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF)) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { createProgram, expandFloat32Array, PROJECTION_MATRIX, throwIfFalsy } from './WebglUtils';\nimport { IRenderModel, IWebGLVertexArrayObject, IWebGL2RenderingContext, ISelectionRenderModel } from './Types';\nimport { fill } from 'common/TypedArrayUtils';\nimport { Attributes, FgFlags } from 'common/buffer/Constants';\nimport { Terminal } from 'xterm';\nimport { IColorSet, IColor } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { RENDER_MODEL_BG_OFFSET, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_INDICIES_PER_CELL } from './RenderModel';\n\nconst enum VertexAttribLocations {\n  POSITION = 0,\n  SIZE = 1,\n  COLOR = 2,\n  UNIT_QUAD = 3\n}\n\nconst vertexShaderSource = `#version 300 es\nlayout (location = ${VertexAttribLocations.POSITION}) in vec2 a_position;\nlayout (location = ${VertexAttribLocations.SIZE}) in vec2 a_size;\nlayout (location = ${VertexAttribLocations.COLOR}) in vec3 a_color;\nlayout (location = ${VertexAttribLocations.UNIT_QUAD}) in vec2 a_unitquad;\n\nuniform mat4 u_projection;\nuniform vec2 u_resolution;\n\nout vec3 v_color;\n\nvoid main() {\n  vec2 zeroToOne = (a_position + (a_unitquad * a_size)) / u_resolution;\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\n  v_color = a_color;\n}`;\n\nconst fragmentShaderSource = `#version 300 es\nprecision lowp float;\n\nin vec3 v_color;\n\nout vec4 outColor;\n\nvoid main() {\n  outColor = vec4(v_color, 1);\n}`;\n\ninterface IVertices {\n  attributes: Float32Array;\n  selection: Float32Array;\n  count: number;\n}\n\nconst INDICES_PER_RECTANGLE = 8;\nconst BYTES_PER_RECTANGLE = INDICES_PER_RECTANGLE * Float32Array.BYTES_PER_ELEMENT;\n\nconst INITIAL_BUFFER_RECTANGLE_CAPACITY = 20 * INDICES_PER_RECTANGLE;\n\nexport class RectangleRenderer {\n\n  private _program: WebGLProgram;\n  private _vertexArrayObject: IWebGLVertexArrayObject;\n  private _resolutionLocation: WebGLUniformLocation;\n  private _attributesBuffer: WebGLBuffer;\n  private _projectionLocation: WebGLUniformLocation;\n  private _bgFloat!: Float32Array;\n  private _selectionFloat!: Float32Array;\n\n  private _vertices: IVertices = {\n    count: 0,\n    attributes: new Float32Array(INITIAL_BUFFER_RECTANGLE_CAPACITY),\n    selection: new Float32Array(3 * INDICES_PER_RECTANGLE)\n  };\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    private _gl: IWebGL2RenderingContext,\n    private _dimensions: IRenderDimensions\n  ) {\n    const gl = this._gl;\n\n    this._program = throwIfFalsy(createProgram(gl, vertexShaderSource, fragmentShaderSource));\n\n    // Uniform locations\n    this._resolutionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_resolution'));\n    this._projectionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_projection'));\n\n    // Create and set the vertex array object\n    this._vertexArrayObject = gl.createVertexArray();\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Setup a_unitquad, this defines the 4 vertices of a rectangle\n    const unitQuadVertices = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const unitQuadVerticesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, unitQuadVerticesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, unitQuadVertices, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(VertexAttribLocations.UNIT_QUAD);\n    gl.vertexAttribPointer(VertexAttribLocations.UNIT_QUAD, 2, this._gl.FLOAT, false, 0, 0);\n\n    // Setup the unit quad element array buffer, this points to indices in\n    // unitQuadVertuces to allow is to draw 2 triangles from the vertices\n    const unitQuadElementIndices = new Uint8Array([0, 1, 3, 0, 2, 3]);\n    const elementIndicesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementIndicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, unitQuadElementIndices, gl.STATIC_DRAW);\n\n    // Setup attributes\n    this._attributesBuffer = throwIfFalsy(gl.createBuffer());\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.enableVertexAttribArray(VertexAttribLocations.POSITION);\n    gl.vertexAttribPointer(VertexAttribLocations.POSITION, 2, gl.FLOAT, false, BYTES_PER_RECTANGLE, 0);\n    gl.vertexAttribDivisor(VertexAttribLocations.POSITION, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.SIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.SIZE, 2, gl.FLOAT, false, BYTES_PER_RECTANGLE, 2 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.SIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.COLOR);\n    gl.vertexAttribPointer(VertexAttribLocations.COLOR, 4, gl.FLOAT, false, BYTES_PER_RECTANGLE, 4 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.COLOR, 1);\n\n    this._updateCachedColors();\n  }\n\n  public render(): void {\n    const gl = this._gl;\n\n    gl.useProgram(this._program);\n\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    gl.uniformMatrix4fv(this._projectionLocation, false, PROJECTION_MATRIX);\n    gl.uniform2f(this._resolutionLocation, gl.canvas.width, gl.canvas.height);\n\n    // Bind attributes buffer and draw\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this._vertices.attributes, gl.DYNAMIC_DRAW);\n    gl.drawElementsInstanced(this._gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, this._vertices.count);\n\n    // Bind selection buffer and draw\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this._vertices.selection, gl.DYNAMIC_DRAW);\n    gl.drawElementsInstanced(this._gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, 3);\n  }\n\n  public onResize(): void {\n    this._updateViewportRectangle();\n  }\n\n  public setColors(): void {\n    this._updateCachedColors();\n    this._updateViewportRectangle();\n  }\n\n  private _updateCachedColors(): void {\n    this._bgFloat = this._colorToFloat32Array(this._colors.background);\n    this._selectionFloat = this._colorToFloat32Array(this._colors.selectionOpaque);\n  }\n\n  private _updateViewportRectangle(): void {\n    // Set first rectangle that clears the screen\n    this._addRectangleFloat(\n      this._vertices.attributes,\n      0,\n      0,\n      0,\n      this._terminal.cols * this._dimensions.scaledCellWidth,\n      this._terminal.rows * this._dimensions.scaledCellHeight,\n      this._bgFloat\n    );\n  }\n\n  public updateSelection(model: ISelectionRenderModel, columnSelectMode: boolean): void {\n    const terminal = this._terminal;\n\n    if (!model.hasSelection) {\n      fill(this._vertices.selection, 0, 0);\n      return;\n    }\n\n    if (columnSelectMode) {\n      const startCol = model.startCol;\n      const width = model.endCol - startCol;\n      const height = model.viewportCappedEndRow - model.viewportCappedStartRow + 1;\n      this._addRectangleFloat(\n        this._vertices.selection,\n        0,\n        startCol * this._dimensions.scaledCellWidth,\n        model.viewportCappedStartRow * this._dimensions.scaledCellHeight,\n        width * this._dimensions.scaledCellWidth,\n        height * this._dimensions.scaledCellHeight,\n        this._selectionFloat\n      );\n      fill(this._vertices.selection, 0, INDICES_PER_RECTANGLE);\n    } else {\n      // Draw first row\n      const startCol = model.viewportStartRow === model.viewportCappedStartRow ? model.startCol : 0;\n      const startRowEndCol = model.viewportCappedStartRow === model.viewportCappedEndRow ? model.endCol : terminal.cols;\n      this._addRectangleFloat(\n        this._vertices.selection,\n        0,\n        startCol * this._dimensions.scaledCellWidth,\n        model.viewportCappedStartRow * this._dimensions.scaledCellHeight,\n        (startRowEndCol - startCol) * this._dimensions.scaledCellWidth,\n        this._dimensions.scaledCellHeight,\n        this._selectionFloat\n      );\n\n      // Draw middle rows\n      const middleRowsCount = Math.max(model.viewportCappedEndRow - model.viewportCappedStartRow - 1, 0);\n      this._addRectangleFloat(\n        this._vertices.selection,\n        INDICES_PER_RECTANGLE,\n        0,\n        (model.viewportCappedStartRow + 1) * this._dimensions.scaledCellHeight,\n        terminal.cols * this._dimensions.scaledCellWidth,\n        middleRowsCount * this._dimensions.scaledCellHeight,\n        this._selectionFloat\n      );\n\n      // Draw final row\n      if (model.viewportCappedStartRow !== model.viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewportStartRow\n        const endCol = model.viewportEndRow === model.viewportCappedEndRow ? model.endCol : terminal.cols;\n        this._addRectangleFloat(\n          this._vertices.selection,\n          INDICES_PER_RECTANGLE * 2,\n          0,\n          model.viewportCappedEndRow * this._dimensions.scaledCellHeight,\n          endCol * this._dimensions.scaledCellWidth,\n          this._dimensions.scaledCellHeight,\n          this._selectionFloat\n        );\n      } else {\n        fill(this._vertices.selection, 0, INDICES_PER_RECTANGLE * 2);\n      }\n    }\n  }\n\n  public updateBackgrounds(model: IRenderModel): void {\n    const terminal = this._terminal;\n    const vertices = this._vertices;\n\n    let rectangleCount = 1;\n\n    for (let y = 0; y < terminal.rows; y++) {\n      let currentStartX = -1;\n      let currentBg = 0;\n      let currentFg = 0;\n      let currentInverse = false;\n      for (let x = 0; x < terminal.cols; x++) {\n        const modelIndex = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n        const bg = model.cells[modelIndex + RENDER_MODEL_BG_OFFSET];\n        const fg = model.cells[modelIndex + RENDER_MODEL_FG_OFFSET];\n        const inverse = !!(fg & FgFlags.INVERSE);\n        if (bg !== currentBg || (fg !== currentFg && (currentInverse || inverse))) {\n          // A rectangle needs to be drawn if going from non-default to another color\n          if (currentBg !== 0 || (currentInverse && currentFg !== 0)) {\n            const offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n            this._updateRectangle(vertices, offset, currentFg, currentBg, currentStartX, x, y);\n          }\n          currentStartX = x;\n          currentBg = bg;\n          currentFg = fg;\n          currentInverse = inverse;\n        }\n      }\n      // Finish rectangle if it's still going\n      if (currentBg !== 0 || (currentInverse && currentFg !== 0)) {\n        const offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n        this._updateRectangle(vertices, offset, currentFg, currentBg, currentStartX, terminal.cols, y);\n      }\n    }\n    vertices.count = rectangleCount;\n  }\n\n  private _updateRectangle(vertices: IVertices, offset: number, fg: number, bg: number, startX: number, endX: number, y: number): void {\n    let rgba: number | undefined;\n    if (fg & FgFlags.INVERSE) {\n      switch (fg & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          rgba = this._colors.ansi[fg & Attributes.PCOLOR_MASK].rgba;\n          break;\n        case Attributes.CM_RGB:\n          rgba = (fg & Attributes.RGB_MASK) << 8;\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          rgba = this._colors.foreground.rgba;\n      }\n    } else {\n      switch (bg & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          rgba = this._colors.ansi[bg & Attributes.PCOLOR_MASK].rgba;\n          break;\n        case Attributes.CM_RGB:\n          rgba = (bg & Attributes.RGB_MASK) << 8;\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          rgba = this._colors.background.rgba;\n      }\n    }\n\n    if (vertices.attributes.length < offset + 4) {\n      vertices.attributes = expandFloat32Array(vertices.attributes, this._terminal.rows * this._terminal.cols * INDICES_PER_RECTANGLE);\n    }\n    const x1 = startX * this._dimensions.scaledCellWidth;\n    const y1 = y * this._dimensions.scaledCellHeight;\n    const r = ((rgba >> 24) & 0xFF) / 255;\n    const g = ((rgba >> 16) & 0xFF) / 255;\n    const b = ((rgba >> 8) & 0xFF) / 255;\n\n    this._addRectangle(vertices.attributes, offset, x1, y1, (endX - startX) * this._dimensions.scaledCellWidth, this._dimensions.scaledCellHeight, r, g, b, 1);\n  }\n\n  private _addRectangle(array: Float32Array, offset: number, x1: number, y1: number, width: number, height: number, r: number, g: number, b: number, a: number): void {\n    array[offset] = x1;\n    array[offset + 1] = y1;\n    array[offset + 2] = width;\n    array[offset + 3] = height;\n    array[offset + 4] = r;\n    array[offset + 5] = g;\n    array[offset + 6] = b;\n    array[offset + 7] = a;\n  }\n\n  private _addRectangleFloat(array: Float32Array, offset: number, x1: number, y1: number, width: number, height: number, color: Float32Array): void {\n    array[offset] = x1;\n    array[offset + 1] = y1;\n    array[offset + 2] = width;\n    array[offset + 3] = height;\n    array[offset + 4] = color[0];\n    array[offset + 5] = color[1];\n    array[offset + 6] = color[2];\n    array[offset + 7] = color[3];\n  }\n\n  private _colorToFloat32Array(color: IColor): Float32Array {\n    console.log(`_colorToFloat32Array: ${color}`);\n    return new Float32Array([\n      ((color.rgba >> 24) & 0xFF) / 255,\n      ((color.rgba >> 16) & 0xFF) / 255,\n      ((color.rgba >> 8) & 0xFF) / 255,\n      ((color.rgba) & 0xFF) / 255\n    ]);\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  constructor() {\n  }\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    this._disposables.forEach(d => d.dispose());\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   */\n  public register<T extends IDisposable>(d: T): void {\n    this._disposables.push(d);\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T> {\n  (e: T): void;\n}\n\nexport interface IEvent<T> {\n  (listener: (e: T) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T> {\n  event: IEvent<T>;\n  fire(data: T): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T> implements IEventEmitter<T> {\n  private _listeners: IListener<T>[] = [];\n  private _event?: IEvent<T>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T> {\n    if (!this._event) {\n      this._event = (listener: (e: T) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(data: T): void {\n    const queue: IListener<T>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, data);\n    }\n  }\n\n  public dispose(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n    this._disposed = true;\n  }\n}\n"],"sourceRoot":""}